----------------------------------------
Open a file at line with “filename:line” syntax




----------------------------------------
emacs2nix


melpa package metadata

;; Package-Requires: ((PACKAGE VERSION) ...)
;; Version:          VERSION
;; URL:              URL
;; Maintainer:       PERSON_NAME

e.g.

;;; dante.el --- Development mode for Haskell -*- lexical-binding: t -*-
;;
;; Copyright (c) 2016 Jean-Philippe Bernardy
;; Author: Jean-Philippe Bernardy <jeanphilippe.bernardy@gmail.com>
;; Maintainer: Jean-Philippe Bernardy <jeanphilippe.bernardy@gmail.com>
;; URL: https://github.com/jyp/dante
;; Created: October 2016
;; Keywords: haskell, tools
;; Package-Requires: ((dash "2.12.0") (emacs "25.1") (f "0.19.0") (flycheck "0.30") (haskell-mode "13.14") (s "1.11.0") (lcr "0.9"))
;; Version: 



e.g.

    dante = callPackage ({ dash, emacs, f, fetchFromGitHub, fetchurl, flycheck, haskell-mode, lib, melpaBuild, s }:
    melpaBuild {
        pname = "dante";
        version = "2018218.1249";
        src = fetchFromGitHub {
          owner = "jyp";
          repo = "dante";
          rev = "8c94ff8cba64d5afda82a486b51f1e439663c3ba";
          sha256 = "1ni445wrlrif4z03lxl5vwwx8falnh43vzxf27m5f7aqx167kbxi";
        };
        recipeFile = fetchurl {
          url = "https://raw.githubusercontent.com/milkypostman/melpa/5afa8226077cbda4b76f52734cf8e0b745ab88e8/recipes/dante";
          sha256 = "1j0qwjshh2227k63vd06bvrsccymqssx26yfzams1xf7bp6y0krs";
          name = "dante";
        };
        packageRequires = [ dash emacs f flycheck haskell-mode s ];
        meta = {
          homepage = "https://melpa.org/#/dante";
          license = lib.licenses.free;
        };
      }) {};



./melpa-packages.sh --melpa ~/melpa -o ~/nixpkgs/pkgs/applications/editors/emacs-modes/melpa-generated.nix


----------------------------------------

"q" quits most pop up windows
C-x 0 will also close the focused window

,a ^tool-bar
,more/ ,dump

----------------------------------------

https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/emacs-packages.nix


e.g. non-default package-description

  pdf-tools = melpaBuild rec {
    pname = "pdf-tools";
    version = "0.80";
    src = fetchFromGitHub {
      owner = "politza";
      repo = "pdf-tools";
      rev = "v${version}";
      sha256 = "1i4647vax5na73basc5dz4lh9kprir00fh8ps4i0l1y3ippnjs2s";
    };
    nativeBuildInputs = [ external.pkgconfig ];
    buildInputs = with external; [ autoconf automake libpng zlib poppler ];
    preBuild = "make server/epdfinfo";
    fileSpecs = [ "lisp/pdf-*.el" "server/epdfinfo" ];
    packageRequires = [ tablist let-alist ];

i.e. needs 

    nativeBuildInputs = [ external.pkgconfig ];
    buildInputs = with external; [ autoconf automake libpng zlib poppler ];
    packageRequires = [ tablist let-alist ];
    preBuild = "make server/epdfinfo";
    fileSpecs = [ "lisp/pdf-*.el" "server/epdfinfo" ];



e.g. non-default package-description

  ghc-mod = melpaBuild rec {
    pname = "ghc";
    version = external.ghc-mod.version;
    src = external.ghc-mod.src;
    packageRequires = [ haskell-mode ];
    propagatedUserEnvPkgs = [ external.ghc-mod ];
    fileSpecs = [ "elisp/*.el" ];
    meta = {
      description = "An extension of haskell-mode that provides completion of symbols and documentation browsing";
      license = bsd3;
    };
  };

i.e. needs ghc-mod

  ghc-mod = melpaBuild rec {
    packageRequires = [ haskell-mode ];
    propagatedUserEnvPkgs = [ external.ghc-mod ];
    fileSpecs = [ "elisp/*.el" ];
  };


e.g. sourced

  find-file-in-project = melpaBuild rec {
    ...
    src = fetchFromGitHub {
      owner  = "technomancy";
      repo   = pname;
      rev    = "53a8d8174f915d9dcf5ac6954b1c0cae61266177";
      sha256 = "0wky8vqg08iw34prbz04bqmhfhj82y93swb8zkz6la2vf9da0gmd";
    };

i.e. not 

    src = external.find-file-in-project.src;


----------------------------------------
