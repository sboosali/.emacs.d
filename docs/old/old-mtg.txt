===================================================

;; ‚ë†
;;
;; ‚ë°
;;
;; ‚ë¢ 
;;
;; ‚ë£ 
;;
;; ‚ë§ 
;;

=================================================

(defvar mtg-company-card-name-characters

  (seq-sort #'< (seq-uniq (string-join (seq-into (mtg-company-card-names) 'list) ""))))

M-: (apply #'string mtg-company-card-name-characters)
;; " !\"',-.01:?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√†√°√¢√©√≠√∂√∫√ª"

(defvar mtg-company-card-name-words

  (seq-sort #'string<
            (seq-uniq
             (seq-mapcat #'split-string
                         (mtg-company-card-names)
                         'list))))

(defvar mtg-company-card-name-articles

  (seq-sort #'string>
            (seq-uniq
             (seq-filter (lambda (word) (not (s-capitalized-p word)))
                         (seq-mapcat #'split-string
                                     (mtg-company-card-names)
                                     'list)))))

M-: (describe-variable 'mtg-company-card-name-articles)
;;  ("a" "an" "and" "as" "at" "but" "by" "en-Dal" "en-Kor" "en-Vec" "for" "from" "il-Dal" "il-Kor" "il-Vec" "in" "into" "le" "of" "on" "or" "the" "to" "upon" "with")

=================================================

(defcustom mtg-language-list

  '(
    )

  "Language names.

`listp' of `symbolp's.

Languages into which cards have been translated."

  :type '(repeat (symbol :tag "Language Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-language-alist

  (list (mtg-language-create :language ' :abbreviation ')
        (mtg-language-create :language ' :abbreviation ')
        )

  "Language metadata (abbreviations and endonyms).

`listp' of `mtg-language-p's:

‚Ä¢ each ‚Äò:language‚Äô should be in `mtg-language-list'."

  :type '(repeat (symbol :tag "Language Info"))

  :safe #'listp
  :group 'mtg)

==============================================

;; Package-Requires: ((emacs "25") (json "1.4"))

;;----------------------------------------------;;

(cl-defun make-mtg-symbol (&key symbol abbreviation (image nil) (char nil))

  "Make an `mtg-symbol'. 

A Smart Constructor ‚Äî validation & defaulting.

Inputs:

‚Ä¢ SYMBOL       ‚Äî a `symbolp'.
‚Ä¢ ABBREVIATION ‚Äî a `symbolp'.
‚Ä¢ IMAGE        ‚Äî an optional `imagep', or `symbolp' thereof.
‚Ä¢ CHAR         ‚Äî an optional `characterp', or `symbolp' thereof.

Examples:

‚Ä¢ M-: (make-mtg-symbol :symbol 'blue-mana :abbreviation 'u :char ?üå¢)
   ‚áí #s(mtg-symbol blue-mana u nil 127778)"

  (let* ((SYMBOL       symbol)
         (ABBREVIATION abbreviation)
         (IMAGE        image)
         (CHAR         char)
         )

  (mtg-symbol-create :symbol       SYMBOL
                     :abbreviation ABBREVIATION
                     :image        IMAGE
                     :char         CHAR)))

==============================================

(defun mtg-company (command &optional arg &rest _)

  "Company Backend for MTG Cards.

Inputs:

‚Ä¢ COMMAND ‚Äî a `symbolp'.
  The Company-Command.
‚Ä¢ ARG ‚Äî an `integerp'.
  A Prefix-Argument."

  (case command

    (interactive
     (company-begin-backend 'company-mtg))

    (init    
     (mtg-initialize-cards-by-name-table))

    (prefix
     (mtg-company-grab-card-name))

    (candidates
     ())

    (ignore-case
     'keep-prefix)))

==============================================


(defun mtg-company-grab-card-name ()

  "Grab the ‚Äòmtg-card-name‚Äô before `point'.

Idiomatic card names:

‚Ä¢ should (mostly) have capitalized words;
‚Ä¢ may include lowercase articles;
‚Ä¢ may have some punctuation characters (hyphen, apostrophe, colon).

If point is at the end of a word, return it.
Otherwise, if point is not inside a symbol, return an empty string."

  (pcase-let* ((BEG-POINT . END-POINT)
               (bounds-of-thing-at-point 'mtg-card-name))
    (POINT (point))
    (TEXT (buffer-substring BEG-POINT POINT))
    )


  (if (looking-at "\\>")

      (buffer-substring (point) (save-excursion (skip-backward mtg-syntax-card-name-charset-regexp) (point)))

    (unless (and (char-after) (eq (char-syntax (char-after)) ?w))

      "")))

  ()))

==============================================



(unless (bound-and-true-p mtg-cards-names-vector)

  (defvar mtg-cards-names-vector mtg-company-cards-names-vector

    "MTG Card Names (see `mtg-company-cards-names-vector')."))


==============================================

(defun mtg-company-initialize-card-names (force)

  "Initialize the MTG Card Name store.

Inputs:

‚Ä¢ FORCE ‚Äî a `booleanp'.

Effects:

‚Ä¢ Modifies `mtg-company-card-names-vector'."

  (let* ((INITIALIZE? (or force
                          (not (bound-and-true-p mtg-company-card-names-vector))))
         )

    (when INITIALIZE?
      ())))

==============================================


(defun mtg-company-card-names-trie ()

  "Return all (known/valid) MTG Cards Naes.

Output:

‚Ä¢ a `vectorp' of `stringp's."

  (if (bound-and-true-p mtg-card-names-vector)
      mtg-card-names-vector
    mtg-company-card-names-vector))

;;----------------------------------------------;;

(defun mtg-company-card-names-trie ()

  "Return all (known/valid) MTG Cards Naes.

Output:

‚Ä¢ a `vectorp' of `stringp's."

  (if (bound-and-true-p mtg-card-names-vector)
      mtg-card-names-vector
    mtg-company-card-names-vector))


;;----------------------------------------------;;

(defun mtg-company-complete-card-name (prefix)

  "Complete PREFIX as an MTG Card Name.

Inputs:

‚Ä¢ PREFIX ‚Äî a `stringp'.

Output:

‚Ä¢ a `listp' of `stringp's.

See:

‚Ä¢ thing ‚Äòmtg-card-name‚Äô."

  (let* ((PREFIX        (or prefix ""))
         (POSSIBILITIES (mtg-company-card-names))
         (CANDIDATES    (complete PREFIX POSSIBILITIES))
         )

    CANDIDATES))

==============================================

(cl-defun mtg-company/radix-tree/suffixes (trie prefix &key ignore-case)

  "Return a `radix-tree-p' from WORDS.

Inputs:

‚Ä¢ TRIE        ‚Äî a `radix-tree-p'.
‚Ä¢ PREFIX      ‚Äî a `stringp'.
‚Ä¢ IGNORE-CASE ‚Äî a `booleanp'.

Examples:

‚Ä¢ M-: (mtg-company/radix-tree/suffixes (mtg-company/radix-tree/from-seq (list \"application\" \"appetizer\" \"applicative\" \"apple\")) \"appli\" :ignore-case t)
    ‚Üí '(\"application\" \"applicative\")"

  (let* ((SET (make-hash-table))
         )

    (radix-tree-iter-mappings
     trie

     (lambda (k v)
       (message "%s ‚áí %s (%s)" k v prefix)
       (when (string-prefix-p prefix k ignore-case)
         (puthash k t SET)))

    (hash-table-keys SET))))

;; ^ M-: (mtg-company/radix-tree/suffixes (mtg-company/radix-tree/from-seq '("application" "appetizer" "applicative" "apple")) "appli" :ignore-case t)
;;     ‚áí '("application" "applicative")
;;
;;   M-: (string-prefix-p "appli" "application" t)
;;     ‚áí t
;;

==============================================

;;----------------------------------------------;;
;; Regexps -------------------------------------;;
;;----------------------------------------------;;

(defun mtg-card-name-character-regexp ()

  "Return a `regexpp' matching an ‚Äòmtg-card-name‚Äô character."

  (let* ((CHAR-REGEXP
          (rx-to-string `(char alpha digit ,@mtg-card-name-punctuation-characters-list) t))

         (WORD-REGEXP
          (rx-to-string `(1+ (regexp ,CHAR-REGEXP)) t))

         (PHRASE-REGEXP
          (rx-to-string `(1+ (word-start (regexp ,WORD-REGEXP) word-end))))
         )

    PHRASE-REGEXP))

==============================================

(defun mtg-card-name-regexp ()

  "Return a `regexpp' matching an ‚Äòmtg-card-name‚Äô.

For example, this command matches these ‚Äòmtg-card-name‚Äôs:

‚Ä¢ ‚ÄúEmpty the Warrens‚Äù
‚Ä¢ ‚ÄúBorrowing 100,000 Arrows‚Äù"

  (let* ((CHAR-REGEXP
          (rx-to-string `(char alpha digit ,@mtg-card-name-punctuation-characters-list) t))

         (ARTICLE-REGEXP
          (regexp-opt mtg-card-name-article-strings-list 'word))

         (WORD-REGEXP
          (rx-to-string `(or (regexp ,ARTICLE-REGEXP)
                             (and word-start
                                  (and (char upper digit)
                                       (0+ (regexp ,CHAR-REGEXP)))
                                  word-end))
                        t))

         (PHRASE-REGEXP
          (rx-to-string `(1+ (regexp ,WORD-REGEXP))))
         )

    PHRASE-REGEXP))

;; ^ M-: (mtg-card-name-regexp)
;;     ‚áí "\\(?:\\(?:\\(a\\(?:nd\\|[nst]\\)?\\|b\\(?:ut\\|y\\)\\|en\\|f\\(?:or\\|rom\\)\\|i\\(?:nto\\|[ln]\\)\\|o[fnr]\\|t\\(?:he\\|o\\)\\|upon\\|with\\)\\|\\<[[:upper:]][!\"',-.:?[:digit:][:alpha:]]*\\>\\)+\\)"

;; e.g. ‚Äòmtg-card-name‚Äôs:
;;
;; ‚Ä¢ card Ancestral Recall card
;; ‚Ä¢ card Looter il-Kor card
;; ‚Ä¢ card Borrowing 100,000 Arrows card
;; ‚Ä¢ card To Arms! card
;; ‚Ä¢ card Empty the Warrens card
;;
;; (re-search-backward "\\(?:\\(?:\\(a\\(?:nd\\|[nst]\\)?\\|b\\(?:ut\\|y\\)\\|en\\|f\\(?:or\\|rom\\)\\|i\\(?:nto\\|[ln]\\)\\|o[fnr]\\|t\\(?:he\\|o\\)\\|upon\\|with\\)\\|\\<[[:upper:]][!\"',-.:?[:digit:][:alpha:]]*\\>\\)+\\)")
;;

==============================================

(defconst mtg-table-list-format

  [("Name" mtg-longest-card-name-length t)
   ("" nil t)
   ("" nil t)
   ("" nil t)
   ("" nil t)
   ("" nil t)
   ("" nil t)
  ]

  "`tabulated-list-format' for `mtg-table-mode'.

a `vectorp' of `listp's of ¬´ (NAME WIDTH SORTER) ¬ª triplets.")

;;----------------------------------------------;;

(defcustom mtg-table-list-format-list

  nil

  "Table Format for `mtg-table-mode'.

a `listp' of columns (`symbolp's) and/or triplets (`listp's) with form:

    (NAME &optional WIDTH SORTER)

Ignored if nil, defaulting to `mtg-default-table-list-format'."

  :type '(repeat (list (string :tag "Column Name"
                               :options ())

                       (choice (integer   :tag "Minimum Column Width")
                               (const nil :tag "Don't Pad Column"))

                       (choice (function  :tag "Sort Column by Comparator")
                               (const t   :tag "Sort Column as String")
                               (const nil :tag "Don't Sort Column"))))

  :safe #'listp
  :group 'mtg)


;;----------------------------------------------;;

(cl-defun mtg-table/clean-text (text &key width)

  "Return TEXT as a valid Table Entry (for `tabulated-list-mode').

Inputs:

‚Ä¢ TEXT ‚Äî a `stringp'. 
‚Ä¢ WIDTH ‚Äî an `integerp' or nil. 

Transformations include:

‚Ä¢ Replace newlines with ‚Äú|‚Äù (i.e. a vertical bar).
‚Ä¢ Truncate to a `string-width' of WIDTH, with ‚Äú‚Ä¶‚Äù (i.e. ellipses)."

  (let* ((TEXT-ONELINE
          (string-join (split-string (string-trim text) "[\f\n\r\v]+" :omit-nulls) " | "))

         (TEXT-TRUNCATED
          (if (and width (natnump width))
              (let ((PADDING  nil)
                    (ELLIPSIS "‚Ä¶")
                    (COLUMN-END width)
                    (COLUMN-BEG 1)
                    )
                (truncate-string-to-width TEXT-ONELINE COLUMN-END COLUMN-BEG PADDING ELLIPSIS))
            TEXT-ONELINE))
         )

    TEXT-TRUNCATED))



==============================================

(cl-defun sboo-mtg-read-scryfall-json (&optional (filename mtg-card-names-file-json))

  "Read a JSON File of MTG cards (in the Scryfall card schema, circa 2019).

Inputs:

‚Ä¢ FILENAME ‚Äî a JSON File.

Output:

‚Ä¢ a set of `mtg-card's.

Example:

‚Ä¢ M-: (sboo-mtg-read-scryfall-json)
    ‚áí 

Links:

‚Ä¢ URL `https://scryfall.com/docs/api/cards'"

  (let* (
         )

    (json-read-file filename)))

==============================================


(defun nsis-last-line-indent-line-p (&optional li-q is-id-q orphan-q)
  "* Is the last line an indentation line?"
  (let (ret)
    (save-excursion
      (when (or is-id-q orphan-q)
        (beginning-of-line))
      (when is-id-q
        (set is-id-q (or (looking-at (eval-when-compile (format "[ \t]*%s" nsis-indent-deindent-keywords)))
                         (looking-at (eval-when-compile (format "[ \t]*%s" nsis-end-keywords))))))
      (when orphan-q
        (set orphan-q (looking-at (eval-when-compile (format "[ \t]*%s" nsis-indent-orphans)))))
      (nsis-goto-last-line li-q)
      (setq ret (looking-at (eval-when-compile (format "[ \t]*%s" nsis-start-keywords))))
      (unless ret
        (setq ret (looking-at (eval-when-compile (format "[ \t]*%s" nsis-indent-deindent-keywords))))))
    (symbol-value 'ret)))

(defun nsis-current-line-deindent-p ()
  "Current line a deindent?"
  (save-excursion
    (beginning-of-line)
    (or
     (looking-at (eval-when-compile (format "[ \t]*%s" nsis-end-keywords)))
     (looking-at (eval-when-compile (format "[ \t]*%s" nsis-indent-deindent-keywords))))))


==============================================


;;----------------------------------------------;;
;;; Variables (‚Äòmtg-card‚Äô) ---------------------;;
;;----------------------------------------------;;

(defcustom mtg-color-list

  '(w u b r g)

  "All MTG Colors.

Their canonical abbreviations."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg-card)

;;----------------------------------------------;;

(defcustom mtg-color-list

  '(wu ub br rg gw
    w u b r g)

  "All MTG Bi-Colors (i.e. two-color pairs).

Related:

‚Äî `mtg-guilds-alist' ‚Äî Ravnica Knicknames (e.g. symbol `azorius' for symbol `wu')."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg-card)

;;==============================================;;

(defcustom mtg-color-abbreviations-alist

  '(
    ( ?w . white)
    ( ?u . blue)
    ( ?b . black)
    ( ?r . red)
    ( ?g . green)
   )

  "Any abbreviations of MTG Colors.

Associates characters with the colors they abbreviate."

  :type '(alist :key-type   (character :tag "MTG Color Abbreviation")
                :value-type (symbol    :tag "MTG Color Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-monocolor-alist

  '(white
    blue
    black
    red
    green)

  "All MTG Colors (their canonical names)."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-bicolor-alist

  '(azorius
    dimir
    rakdos
    gruul
    selesnya
    orzhov
    izzet
    golgari
    boros
    simic)

   "All MTG color-triplets (a.k.a. shardes & wedges)."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-tricolor-alist

  '()

   "All MTG color-triplets (a.k.a. shardes & wedges)."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg)

 Red + green + black = Jund
 White + green + blue = Bant
 Black + red + blue = Grixis
 Green + white + red = Naya
 Blue + white + black = Esper
 Blue + red + white = Jeskai (clan on Tarkir), Numot (dragon from Apocalypse) or Raka (from Rakavolver)
 Red + white + black = Mardu (clan on Tarkir), Oros (dragon from Apocalypse) or Dega (from Degavolver)
 Black + green + blue = Sultai (clan on Tarkir), Vorosh (dragon from Apocalypse) or Ana (from Anavolver)
 Green + blue + red = Temur (clan on Tarkir), Intet (dragon from Apocalypse) or Ceta (from Cetavolver)
 White + black + green = Abzan (clan on Tarkir) Teneb (dragon from Apocalypse) Necra (from Necravolver), Junk , or Doran 

Informal usages:

Red + white + black = Borzhov
Red + green + blue = Grizzet
In addition, it's especially common for red + blue + green and black + blue + green to be called by their abbreviations ‚Äî "RUG" and "BUG" ‚Äî because these are names that are easy to remember and pronounce.

;;----------------------------------------------;;

(defcustom mtg-guild-list

  '(azorius
    dimir
    rakdos
    gruul
    selesnya
    orzhov
    izzet
    golgari
    boros
    simic)

   "All MTG guilds i.e. (color pairs)."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg)

 ;; White + Blue = Azorius
 ;; Blue + Black = Dimir
 ;; Black + Red = Rakdos
 ;; Red + Green = Gruul
 ;; Green + White = Selesnya
 ;; White + Black = Orzhov
 ;; Blue + Red = Izzet
 ;; Black + Green = Golgari
 ;; Red + White = Boros
 ;; Green + Blue = Simic

;;----------------------------------------------;;

Four colors
Most decks do not have four full colors. As with three color enemies, if they reach this many colors, it's a shard with a splash of another color. So you're more likely to see something like "American splash black" instead of "Yore".

Names for four-color identities come from one of two sources:

The names of the Nephilims from Guildpact.
The names of the four-colour ‚Äúguild identities‚Äù defined during Commander 2016's design.
Reference the one color the four-color combination is missing, thus Non-(color).
So the four colour identities' names are:

 Blue + black + red + green = Glint-Eye, or Chaos, or Non-white
 Black + red + green + white = Dune (or Dune-Brood), or Aggression, or Non-blue
 Red + green + white + blue = Ink-Treader, or Altruism, or Non-black
 Green + white + blue + black = Witch (or Witch-Maw), or Growth, or Non-red
White + blue + black + red = Yore (or Yore-Tiller), or Artifice, or Non-green

;;----------------------------------------------;;

(defcustom mtg-super-types-list

  '(basic
    legendary
    snow
    ongoing
    world)

  "Known Super-Types.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Supertype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-card-types-list

  '(instant        ; ?üó≤
    sorcery
    land
    artifact
    enchantment
    creature
    planeswalker
    conspiracy)

  "Known Card-Types.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Card type"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-spell-subtypes-list

  '(
    
   )

  "Known Subtypes for spells (i.e. instants and sorceries).

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-land-subtypes-list

  '(
    
   )

  "Known Subtypes for lands.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-artifact-subtypes-list

  '(
    
   )

  "Known Subtypes for artifacts.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-enchantment-subtypes-list

  '(
    
   )

  "Known Subtypes for enchantments.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-creature-subtypes-list

  '(
    
   )

  "Known Subtypes for creatures.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-planeswalker-subtypes-list

  '(
    
   )

  "Known Subtypes for planeswalkers.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-subtypes-alist

  '(
    (spell        . mtg-spell-subtypes-list)
    (land         . mtg-land-subtypes-list)
    (artifact     . mtg-artifact-subtypes-list)
    (enchantment  . mtg-enchantment-subtypes-list)
    (creature     . mtg-creature-subtypes-list)
    (planeswalker . mtg-planeswalker-subtypes-list)
   )

  "Known Subtypes, by Card-Type.

an association `listp':

‚Ä¢ from `symbolp'
‚Ä¢ to EITHER a `listp' of `symbolp's OR a `symbolp' thereof.

`mtg-subtypes-alist' represents both ‚Äòinstant‚Äô and ‚Äòsorcery‚Äô
(which are in `mtg-card-types-list') as ‚Äòspell‚Äô
(which isn't in `mtg-card-types-list')."

  :type '(alist :key-type   (symbol :tag "Card type")
                :value-type (choice (variable :tag "List Variable")
                                    (repeat (symbol :tag "Subtypes"))))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-rules-keywords-list

  '(
    absorb
    affinity
    afflict
    aftermath
    amplify
    annihilator
    ascend
    aura-swap
    awaken
    banding
    battle-cry
    bestow
    bloodthirst
    bushido
    buyback
    cascade
    champion
    changeling
    cipher
    conspire
    convoke
    crew
    cumulative-upkeep
    cycling
    dash
    deathtouch
    defender
    delve
    dethrone
    devoid
    devour
    double-strike
    dredge
    echo
    embalm
    emerge
    enchant
    entwine
    epic
    equip
    escalate
    eternalize
    evoke
    evolve
    exalted
    exploit
    extort
    fabricate
    fading
    fear
    first-strike
    flanking
    flash
    flashback
    flying
    forecast
    fortify
    frenzy
    fuse
    graft
    gravestorm
    haste
    haunt
    hexproof
    hidden-agenda
    hideaway
    horsemanship
    improvise
    indestructible
    infect
    ingest
    intimidate
    kicker
    landwalk
    level-up
    lifelink
    living-weapon
    madness
    melee
    menace
    miracle
    modular
    morph
    myriad
    ninjutsu
    offering
    outlast
    overload
    partner
    persist
    phasing
    poisonous
    protection
    provoke
    prowess
    prowl
    rampage
    reach
    rebound
    recover
    reinforce
    renown
    replicate
    retrace
    ripple
    scavenge
    shadow
    shroud
    skulk
    soulbond
    soulshift
    splice
    split-second
    storm
    sunburst
    surge
    suspend
    totem-armor
    trample
    transfigure
    transmute
    tribute
    undaunted
    undying
    unearth
    unleash
    vanishing
    vigilance
    wither
    )

  "Known Keywords (in rules text).

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Keyword"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-symbol-list

  '(
   )

  "MTG Symbols.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "MTG Symbol"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-symbol-alist

  `(
    (tap . ,(mtg-symbol-create :symbol 'tap :abbreviation 'T :image 'mtg-tap-symbol-svg-image :char 'mtg-tap-symbol-char))
   )

  "Symbol metadata (abbreviations and endonyms).

`listp' of `mtg-symbol-p's:

‚Ä¢ each ‚Äò:symbol‚Äô should be in `mtg-symbol-list'."

  :type '(repeat (symbol :tag "Symbol Info"))

  :safe #'listp
  :group 'mtg)

;;==============================================;;

(defcustom mtg-card-border-color-list

  '(black
    white
    silver)

  "Known Border Colors.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Border Color"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-card-frame-list

  '(old
    new
    timeshifted
    future)

  "Known Card Frames.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Card Frame"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-card-layout-list

  '(
    aftermath
    double-faced
    flip
    leveler
    meld
    normal
    phenomenon
    plane
    scheme
    split
    token
    vanguard
   )

  "Known Card Layouts.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Card Layout"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-language-list

  '(english
    german
    french
    italian
    spanish
    portuguese
    japanese
    chinese
    russian
    taiwanese
    korean
    )

  "Language names.

`listp' of `symbolp's.

Languages into which cards have been translated."

  :type '(repeat (symbol :tag "Language Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-language-alist

  `(
    (english    . ,(mtg-language-create :language 'english    :abbreviation 'en :endonym "English"   :flag "üá∫üá∏"))
    (german     . ,(mtg-language-create :language 'german     :abbreviation 'de :endonym "Deutsch"   :flag ""))
    (french     . ,(mtg-language-create :language 'french     :abbreviation 'fr :endonym "Fran√ßais"  :flag ""))
    (italian    . ,(mtg-language-create :language 'italian    :abbreviation 'it :endonym "Italiano"  :flag ""))
    (spanish    . ,(mtg-language-create :language 'spanish    :abbreviation 'es :endonym "Espa√±ol"   :flag ""))
    (portuguese . ,(mtg-language-create :language 'portuguese :abbreviation 'pt :endonym "Portugu√™s" :flag ""))
    (japanese   . ,(mtg-language-create :language 'japanese   :abbreviation 'jp :endonym "Êó•Êú¨Ë™û"    :flag ""))
    (chinese    . ,(mtg-language-create :language 'chinese    :abbreviation 'cn :endonym "ÁÆÄ‰Ωì‰∏≠Êñá"  :flag ""))
    (russian    . ,(mtg-language-create :language 'russian    :abbreviation 'ru :endonym "–†—É—Å—Å–∫–∏–π"   :flag ""))
    (taiwanese  . ,(mtg-language-create :language 'taiwanese  :abbreviation 'tw :endonym "ÁπÅÈ´î‰∏≠Êñá"  :flag ""))
    (korean     . ,(mtg-language-create :language 'korean     :abbreviation 'ko :endonym "ÌïúÍµ≠Ïñ¥"    :flag ""))
    )

  "Language metadata (abbreviations and endonyms).

`listp' of `mtg-language-p's:

‚Ä¢ each ‚Äò:language‚Äô should be in `mtg-language-list'."

  :type '(repeat (symbol :tag "Language Info"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-rarity-list

  '(common
    uncommon
    rare
    mythic)

  "Rarity names.

`listp' of `symbolp's.

Raritys into which cards have been translated."

  :type '(repeat (symbol :tag "Rarity Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-rarity-alist

  `(
    (common   . ,(mtg-rarity-create :rarity 'common   :abbreviation 'C :color "black"))
    (uncommon . ,(mtg-rarity-create :rarity 'uncommon :abbreviation 'U :color "silver"))
    (rare     . ,(mtg-rarity-create :rarity 'rare     :abbreviation 'R :color "gold"))
    (mythic   . ,(mtg-rarity-create :rarity 'mythic   :abbreviation 'M :color "bronze"))
    )

  "Rarity metadata (abbreviations and endonyms).

`listp' of `mtg-rarity-p's:

‚Ä¢ each ‚Äò:rarity‚Äô should be in `mtg-rarity-list'."

  :type '(alist :key-type   (symbol     :tag "Rarity")
                :value-type (mtg-rarity :tag "Rarity Info"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-formats-list

  '(block
    classic
    commander
    extended
    legacy
    modern
    standard
    vintage)

  "Known MTG formats.

AN MTG Format is a set of MTG Sets, with its own Banned&Restricted List,
and (possibly) its own Rules changes.

`listp' of `symbolp's

Customization:

‚Ä¢ Programmatically ‚Äî via `add-to-list'.
‚Ä¢ Graphically ‚Äî via checklist widget."

  :type '(repeat (symbol :tag "MTG Format"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-symbol-list

  '(common
    uncommon
    rare
    mythic)

  "Symbol names.

`listp' of `symbolp's.

Symbols into which cards have been translated."

  :type '(repeat (symbol :tag "Symbol Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-symbol-alist

  `(

    (tap                    . ,(make-mtg-symbol :symbol 'tap                    :abbreviation 'T   :char ?‚ìâ))
    (untap                  . ,(make-mtg-symbol :symbol 'untap                  :abbreviation 'Q   :char ?üÖ§))

    (white-mana             . ,(make-mtg-symbol :symbol 'white-mana             :abbreviation 'W   :char ?üåû))
    (blue-mana              . ,(make-mtg-symbol :symbol 'blue-mana              :abbreviation 'U   :char ?üå¢))
    (black-mana             . ,(make-mtg-symbol :symbol 'black-mana             :abbreviation 'B   :char ?üíÄ))
    (red-mana               . ,(make-mtg-symbol :symbol 'red-mana               :abbreviation 'R   :char ?‚õ∞))
    (green-mana             . ,(make-mtg-symbol :symbol 'green-mana             :abbreviation 'G   :char ?üå≤))

    (colorless-mana         . ,(make-mtg-symbol :symbol 'colorless-mana         :abbreviation 'C   :char ?‚óá))
    (snow-mana              . ,(make-mtg-symbol :symbol 'snow-mana              :abbreviation 'S   :char ?‚ùÑ))
    (energy-mana            . ,(make-mtg-symbol :symbol 'energy-mana            :abbreviation 'E   :char ?‚ö°))
    (variable-X-mana        . ,(make-mtg-symbol :symbol 'variable-X-mana        :abbreviation 'X   :char ?X))
    (variable-Y-mana        . ,(make-mtg-symbol :symbol 'variable-Y-mana        :abbreviation 'Y   :char ?Y))
    (variable-Z-mana        . ,(make-mtg-symbol :symbol 'variable-Z-mana        :abbreviation 'Z   :char ?Z))

    (phyrexian-white-mana   . ,(make-mtg-symbol :symbol 'phyrexian-white-mana   :abbreviation 'P/W :char ?œï))
    (phyrexian-blue-mana    . ,(make-mtg-symbol :symbol 'phyrexian-blue-mana    :abbreviation 'P/U :char ?œï))
    (phyrexian-black-mana   . ,(make-mtg-symbol :symbol 'phyrexian-black-mana   :abbreviation 'P/B :char ?œï))
    (phyrexian-red-mana     . ,(make-mtg-symbol :symbol 'phyrexian-red-mana     :abbreviation 'P/R :char ?œï))
    (phyrexian-green-mana   . ,(make-mtg-symbol :symbol 'phyrexian-green-mana   :abbreviation 'P/G :char ?œï))

    (monohybrid-white-mana  . ,(make-mtg-symbol :symbol 'monohybrid-white-mana  :abbreviation '2/W :char ?üåû))
    (monohybrid-blue-mana   . ,(make-mtg-symbol :symbol 'monohybrid-blue-mana   :abbreviation '2/U :char ?üå¢))
    (monohybrid-black-mana  . ,(make-mtg-symbol :symbol 'monohybrid-black-mana  :abbreviation '2/B :char ?üíÄ))
    (monohybrid-red-mana    . ,(make-mtg-symbol :symbol 'monohybrid-red-mana    :abbreviation '2/R :char ?‚õ∞))
    (monohybrid-green-mana  . ,(make-mtg-symbol :symbol 'monohybrid-green-mana  :abbreviation '2/G :char ?üå≤))

    (zero-generic-mana      . ,(make-mtg-symbol :symbol 'zero-generic-mana      :abbreviation '0   :char ?‚ì™))
    (one-generic-mana       . ,(make-mtg-symbol :symbol 'one-generic-mana       :abbreviation '1   :char ?‚ìµ))
    (two-generic-mana       . ,(make-mtg-symbol :symbol 'two-generic-mana       :abbreviation '2   :char ?‚ì∂))
    (three-generic-mana     . ,(make-mtg-symbol :symbol 'three-generic-mana     :abbreviation '3   :char ?‚ì∑))
    (four-generic-mana      . ,(make-mtg-symbol :symbol 'four-generic-mana      :abbreviation '4   :char ?‚ì∏))
    (five-generic-mana      . ,(make-mtg-symbol :symbol 'five-generic-mana      :abbreviation '5   :char ?‚ìπ))
    (six-generic-mana       . ,(make-mtg-symbol :symbol 'six-generic-mana       :abbreviation '6   :char ?‚ì∫))
    (seven-generic-mana     . ,(make-mtg-symbol :symbol 'seven-generic-mana     :abbreviation '7   :char ?‚ìª))
    (eight-generic-mana     . ,(make-mtg-symbol :symbol 'eight-generic-mana     :abbreviation '8   :char ?‚ìº))
    (nine-generic-mana      . ,(make-mtg-symbol :symbol 'nine-generic-mana      :abbreviation '9   :char ?‚ìΩ))

    )

  "Symbol metadata (abbreviations and endonyms).

`listp' of `mtg-symbol-p's:

‚Ä¢ each ‚Äò:symbol‚Äô should be in `mtg-symbol-list'."

  :type '(alist :key-type   (symbol     :tag "Symbol")
                :value-type (mtg-symbol :tag "Symbol Info"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-edition-type-list

  '(expansion
    core
    reprint
    box
    un
    from the vault
    premium deck
    duel deck
    starter
    commander
    planechase
    archenemy
    promo
    vanguard
    masters
    conspiracy
    masterpiece)

  "Known Types of MTG Editions.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Edition Type"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-edition-alist

  `(
    
   )

  "Known MTG Editions.

a `listp' of `mtg-edition-p's."

  :type '(repeat (mtg-edition :tag "Edition"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-edition-name-list

  '(
    al
    be
    un
    rv
    summer
    e4
    e5
    e6
    e7
    e8
    e9
    e10
    m10
    m11
    m12
    m13
    m14
    m15
    ori
    an
    aq
    lg
    dk
    fe
    hl
    mr
    vi
    wl
    tp
    sh
    ex
    us
    ul
    ud
    mm
    ne
    pr
    in
    ps
    ap
    od
    tr
    ju
    on
    le
    sc
    mi
    ds
    dn5
    chk
    bok
    sok
    rav
    gp
    di
    ia
    ai
    cs
    tsts
    ts
    pc
    fut
    lw
    mt
    shm
    eve
    ala
    cfx
    arb
    zen
    wwk
    roe
    som
    mbs
    nph
    isd
    dka
    avr
    rtr
    gtc
    dgm
    ths
    bng
    jou
    ktk
    frf
    dtk
    bfz
    ogw
    soi
    emn
    kld
    aer
    akh
    hou
    xln
    rix
    dom
    bbd
    m19
    c18
    grn
    rna
    war
    mh1
    m20
    c19
   )

  "Known MTG Editions.

a `listp' of `mtg-edition-p's.

URL `https://mtg.gamepedia.com/Template:List_of_Magic_sets'"

  :type '(repeat (symbol :tag "Edition"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-block-list

  (list (mtg-block-create :abbreviation 'antediluvian   :name "Antediluvian Sets"      :editions '())
        (mtg-block-create :abbreviation 'ordinal        :name "Ordinal Core Sets"      :editions '())
        (mtg-block-create :abbreviation 'cardinal       :name "Cardinal Core Sets"     :editions '())
        (mtg-block-create :abbreviation 'mirage         :name "Mirage"                 :editions '())
        (mtg-block-create :abbreviation 'rath           :name "The Rath Cycle"         :editions '())
        (mtg-block-create :abbreviation 'urza           :name "The Urza Cycle"         :editions '())
        (mtg-block-create :abbreviation 'masques        :name "Masques"                :editions '())
        (mtg-block-create :abbreviation 'invasion       :name "Invasion"               :editions '())
        (mtg-block-create :abbreviation 'odyssey        :name "Odyssey"                :editions '())
        (mtg-block-create :abbreviation 'onslaught      :name "Onslaught"              :editions '())
        (mtg-block-create :abbreviation 'mirrodin       :name "Mirrodin"               :editions '())
        (mtg-block-create :abbreviation 'kamigawa       :name "Kamigawa"               :editions '())
        (mtg-block-create :abbreviation 'ravnica        :name "Ravnica"                :editions '())
        (mtg-block-create :abbreviation 'iceage         :name "Ice Age"                :editions '())
        (mtg-block-create :abbreviation 'timespiral     :name "Time Spiral"            :editions '())
        (mtg-block-create :abbreviation 'lorwyn         :name "Lorwyn"                 :editions '())
        (mtg-block-create :abbreviation 'shadowmoor     :name "Shadowmoor"             :editions '())
        (mtg-block-create :abbreviation 'alara          :name "Shards Of Alara"        :editions '())
        (mtg-block-create :abbreviation 'zendikar       :name "Zendikar"               :editions '())
        (mtg-block-create :abbreviation 'scars          :name "Scars Of Mirrodin"      :editions '())
        (mtg-block-create :abbreviation 'innistrad      :name "Innistrad"              :editions '())
        (mtg-block-create :abbreviation 'ravnica2       :name "Return To Ravnica"      :editions '())
        (mtg-block-create :abbreviation 'theros         :name "Theros"                 :editions '())
        (mtg-block-create :abbreviation 'khans          :name "Khans Of Tarkir"        :editions '())
        (mtg-block-create :abbreviation 'zendikar2      :name "Battle For Zendikar"    :editions '())
        (mtg-block-create :abbreviation 'shadows        :name "Shadows Over Innistrad" :editions '())
        (mtg-block-create :abbreviation 'kaladesh       :name "Kaladesh"               :editions '())
        (mtg-block-create :abbreviation 'amonkhet       :name "Amonkhet"               :editions '())
        (mtg-block-create :abbreviation 'ixalan         :name "Ixalan"                 :editions '())
        (mtg-block-create :abbreviation 'ravnica3       :name "Guilds of Ravnica"      :editions '())
        (mtg-block-create :abbreviation 'war            :name "War of the Spark"       :editions '())
        )

  "Known MTG Blocks (of MTG Editions).

a `listp' of `mtg-block-p's."

  :type '(repeat (mtg-block :tag "Block"))

  :safe #'listp
  :group 'mtg)

(defcustom mtg-colors-list

  '(w u b r g)

  "All MTG Colors.

Represents:

‚Ä¢ Their canonical abbreviations.
‚Ä¢ The canonical ordering.

Related:

‚Äî `mtg-guilds-alist' ‚Äî Ravnica Knicknames (e.g. symbol `azorius' for symbol `wu')."

  :type '(repeat (symbol :tag "MTG Color"))

  :safe #'listp
  :group 'mtg-card)


==============================================

;;; Commentary:

;; Editor for ‚ÄúMagic: The Gathering‚Äù.
;;
;; Features include:
;;
;; ‚Ä¢ ‚Äòmtg-mode‚Äô  ‚Äî Major Mode for editing custom MTG Cards.
;; ‚Ä¢ ‚Äòmtg-query‚Äô ‚Äî Search Engine for MTG Cards 
;; ‚Ä¢ ‚Äòmtg-json‚Äô  ‚Äî 
;; ‚Ä¢ ‚Äòmtg-‚Äô      ‚Äî 
;; ‚Ä¢ ‚Äòmtg-‚Äô      ‚Äî 
;; 
;; Integrations include:
;;
;; ‚Ä¢ ‚Äòhelm-mtg‚Äô    ‚Äî ‚Äòhelm‚Äô integration; Helm TUIs for .
;; ‚Ä¢ ‚Äòcompany-mtg‚Äô ‚Äî ‚Äòcompany‚Äô integration; Company Backends for card names/types/‚Ä¶.
;; ‚Ä¢
;; ‚Ä¢
;;
;; ‚Äòmtg-mode‚Äô features:
;;
;; ‚Ä¢ Completion for writing custom ‚ÄúMagic: The Gathering‚Äù cards.
;; ‚Ä¢ 
;; ‚Ä¢ Export your custom set to:
;;     ‚Ä¢ MTGJSON
;;     ‚Ä¢ ¬´ Magic Set Editor ¬ª ‚Äî URL `'
;;     ‚Ä¢ ¬´ /r/custommagic ¬ª ‚Äî URL `https://www.reddit.com/r/custommagic'
;;     ‚Ä¢ ¬´ MTG Salvation ¬ª ‚Äî URL `https://www.mtgsalvation.com/forums/magic-fundamentals/custom-card-creation'
;;     ‚Ä¢ 
;;     ‚Ä¢ 
;;
;; ‚Äòmtg-query‚Äô features:
;;
;; ‚Ä¢
;; ‚Ä¢ Search official cards without installation (this file embeds data)
;; ‚Ä¢ Search custom cards 
;; ‚Ä¢
;; ‚Ä¢
;; ‚Ä¢
;; ‚Ä¢
;;
;;

;;; Commentary:

;; Editor for ‚ÄúMagic: The Gathering‚Äù.
;;
;; Features include:
;;
;; ‚Ä¢ ‚Äòmtg-mode‚Äô  ‚Äî Major Mode for editing custom MTG Cards.
;; ‚Ä¢ ‚Äòmtg-query‚Äô ‚Äî Search Engine for MTG Cards 
;; ‚Ä¢ ‚Äòmtg-json‚Äô  ‚Äî 
;; ‚Ä¢ ‚Äòmtg-‚Äô      ‚Äî 
;; ‚Ä¢ ‚Äòmtg-‚Äô      ‚Äî 
;; 
;; Integrations include:
;;
;; ‚Ä¢ ‚Äòhelm-mtg‚Äô    ‚Äî ‚Äòhelm‚Äô integration: Helm TUIs for .
;; ‚Ä¢ ‚Äòcompany-mtg‚Äô ‚Äî ‚Äòcompany‚Äô integration: Company Backends for card names/types/keywords/‚Ä¶.
;; ‚Ä¢ ‚Äòyas-mtg‚Äô     ‚Äî ‚Äòyasnippet‚Äô integration: Snippets for phrases/cycles/‚Ä¶.
;; ‚Ä¢
;;
;; ‚Äòmtg-mode‚Äô features:
;;
;; ‚Ä¢ Write custom cards conveniently:
;;
;;    ‚Ä¢ Completion ‚Äî for card names/types/keywords/‚Ä¶.
;; 
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;; 
;;    ‚Ü™ Benefits of completion include:
;; 
;;        ‚Ä¢ Type fewer characters.
;;        ‚Ä¢ Make fewer mistakes.
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;; 
;;    ‚Ä¢ Skeletons ‚Äî 
;;
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;; 
;; ‚Ä¢ Export your custom set for:
;;
;;     ‚Ä¢ [‚úì] MTGJSON          ‚Äî as a ‚Äπ.json‚Ä∫ file (a.k.a. a JSON Object), with the schema.
;;     ‚Ä¢ [‚úì] Magic Set Editor ‚Äî as a ‚Äπ.tar‚Ä∫ file (a.k.a. a Tar Archive), with the ‚Äπ.mse-set‚Ä∫ schema.
;;     ‚Ä¢ [‚úì] /r/custommagic   ‚Äî as a ‚Äπ.md‚Ä∫ file (a.k.a. Markdown), in Reddit-flavored Markdown, with the Subreddit-specific pseudo-links.
;;     ‚Ä¢ [‚ùå] MTG Salvation    ‚Äî as a ‚Äπ.bb‚Ä∫ file (a.k.a. BBCode). 
;;
;; ‚Ä¢ Render your custom set for:
;;
;;     ‚Ä¢ [‚úì] websites   ‚Äî as a ‚Äπ.html‚Ä∫ file (a.k.a. a Web Page), that's beautifully styled and completely standalone.
;;     ‚Ä¢ [‚ùå] printers   ‚Äî as a ‚Äπ.pdf‚Ä∫ file (?),
;;
;;         ‚Ä¢ HTML Styling    ‚Äî via SVG mana symbols, the ‚ÄúBelern‚Äù font, and appropriate Bold/Italic (e.g. italics for flavor/remdinder text).
;;         ‚Ä¢ Standalone HTML ‚Äî all assets (e.g. artwork PNGs, CSS symbols) are embedded (via ‚ÄúData URIs‚Äù and inline <style>s).
;;           Thus, no 
;;
;;
;; ‚Ä¢
;;
;; ‚Ä¢ 
;;
;; ‚Ä¢ 
;;
;; ‚Ä¢ 
;;
;; ‚Ä¢ 
;;
;; ‚Äòmtg-query‚Äô features:
;;
;; ‚ë† DSL .
;;   e.g. ¬´ %u *instant` ¬ª finds
;;
;; ‚ë° No Installation ‚Äî This file embeds most data.
;;
;;    The current version of this file has all data (except coprighted artwork) for all cards from ‚ÄúAlpha/Beta/Unlimited‚Äù to ‚ÄúWar Of The Spark‚Äù.
;;
;;    Thus, as long as Emacs knows where ‚Äòmtg.el‚Äô is (i.e. via your ‚Äòload-path‚Äô) and is able to run it (i.e. to ‚Äòload‚Äô it,.
;;    you can immediately begin searching through (the snapshot of) all printed cards.; without downloading anything else, without being required to put the right file in the right place, without losing track of any files, etc.
;;    . 
;; 
;; ‚ë¢ Extensibility ‚Äî Emacs
;;
;;    ‚Ä¢ Data Extensibility ‚Äî Search through custom cards by registering them
;;
;;    ‚Ä¢ Query Extensibility ‚Äî Write your own predicates. e.g. square e.g. lupine.
;; 
;;
;; 
;;
;; 
;;
;; ‚ë£ 
;;
;; ‚ë§ 
;;
;;
;;
;; ‚Äòhelm-mtg‚Äô features:
;;
;; ‚Ä¢ 
;;
;; ‚Ä¢
;;
;; ‚Ä¢
;;
;; ‚Äòcompany-mtg‚Äô features:
;;
;; ‚Ä¢ Annotations ‚Äî Unlike ‚Äòmtg-complete/*‚Äô, Company can annotate candidates. For example:
;;
;;        ‚Ä¢ Card Names  ‚Äî are annotated with a summary of the card (color, type, cost).
;;        ‚Ä¢ Keywords    ‚Äî are annotated with their Reminder Text.
;;        ‚Ä¢ Set Codes   ‚Äî are annotated with their full names (e.g. ¬´ AN ‚ÄúArabian Nights‚Äù ¬ª).
;;
;;   Completion was is helpful for
;;   Disambiguating between:
;;
;;        ‚Ä¢ Different Legends ‚Äî e.g. ‚ÄπBorborygmus‚Ä∫ vs ‚ÄπBorborygmus Enraged‚Ä∫. e.g. ‚ÄπYagmoth's Bargain‚Ä∫ vs ‚ÄπYagmoth's Will‚Ä∫.
;;        ‚Ä¢ Similar Names    ‚Äî are annotated with a summary of the card (color, type, cost).
;;        ‚Ä¢ Types    ‚Äî are annotated with .
;;        ‚Ä¢ Sets     ‚Äî are annotated with their full names (e.g. ¬´ AN ‚ÄúArabian Nights‚Äù ¬ª).
;;
;;
;;   [Author's Note] I post a lot about MTG (on forums and with my group chat).
;;                   Way before this package, I wrote my own MTG Company Backend for card names,
;;                   Its usefulness was one of the inspirations for everthing else.
;;
;; ‚Ä¢
;;
;; ‚Ä¢
;;
;; ‚Ä¢
;;
;; ‚Äòyas-mtg‚Äô features:
;;
;; ‚Ä¢ ‚Äî Unlike ‚Äòmtg-skeleton/*‚Äô:
;;
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;;        ‚Ä¢ 
;; 
;; ‚Ä¢
;;
;; ‚Ä¢
;;
;; Links:
;;
;; ‚Ä¢ MTGJSON          ‚Äî URL `https://mtgjson.com/'
;; ‚Ä¢ Magic Set Editor ‚Äî URL `http://magicseteditor.sourceforge.net/'
;; ‚Ä¢ /r/custommagic   ‚Äî URL `https://www.reddit.com/r/custommagic'
;; ‚Ä¢ MTG Salvation    ‚Äî URL `https://www.mtgsalvation.com/forums/magic-fundamentals/custom-card-creation'
;;
;; 


==============================================


;;==============================================;;

(cl-defstruct (mtg-
               (:constructor mtg--create)
               (:copier      nil))

  abbreviation (name ""))

;; M-: (mtg--create :abbreviation ' :name "")
;;  ‚áí #s(mtg- )

==============================================


;;----------------------------------------------;;
;;; MTG Edit (Major) Mode ----------------------;;
;;----------------------------------------------;;

;;----------------------------------------------;;
;;; MTG Query (Major) Mode ---------------------;;
;;----------------------------------------------;;

;;----------------------------------------------;;
;;; MTG Table (Major) Mode ---------------------;;
;;----------------------------------------------;;


==============================================

(defvar mtg-query-mode-syntax-table

  (let ((TABLE (make-syntax-table))
        )

    ;; Prefix (Unary) Operators:

    (modify-syntax-entry ?\` "'"   TABLE)
    (modify-syntax-entry ?\~ "'"   TABLE)

    (modify-syntax-entry ?\! "'"   TABLE)
    (modify-syntax-entry ?\@ "'"   TABLE)
    (modify-syntax-entry ?\# "< p" TABLE)
    ;; ^ ¬´ # ¬ª is also a ‚Äúcomment-starter‚Äù.
    (modify-syntax-entry ?\% "'"   TABLE)
    (modify-syntax-entry ?\& ". p" TABLE)
    ;; ^ ¬´ & ¬ª is also an Infix Operator (Conjunction).
    (modify-syntax-entry ?\| ". p" TABLE)
    ;; ^ ¬´ | ¬ª is also an Infix Operator (Disjunction).
    (modify-syntax-entry ?\* "'"   TABLE)

    (modify-syntax-entry ?\^ "_ p" TABLE)
    ;; ^ ¬´ ^ ¬ª, semantically a regexp (match the Beginning-of-Word);
    ;;   syntactically, symbol within a words;
    ;;   is also an ‚Äúexpression-prefix‚Äù.
    (modify-syntax-entry ?\$ "_ p" TABLE)
    ;; ^ ¬´ $ ¬ª, semantically a regexp (match the End-of-Word);
    ;;   syntactically, symbol within a words;
    ;;   is also an ‚Äúexpression-prefix‚Äù.

    ;; ¬´ - ¬ª is punctuation (as an operator),
    ;; but ¬´ -- ¬ª is a comment-starter:

    (modify-syntax-entry ?\- ". 123" TABLE)

    ;; ¬´ " ¬ª is a string delimiter:

    (modify-syntax-entry ?\" "\"" TABLE)

    ;; Brackets (i.e. parens, curly braces, square braces):

    (modify-syntax-entry ?\( "()"    TABLE)
    (modify-syntax-entry ?\) ")("    TABLE)
    (modify-syntax-entry ?\[ "(]"    TABLE)
    (modify-syntax-entry ?\] ")["    TABLE)
    (modify-syntax-entry ?\{ "(}1nb" TABLE) ; ¬´ "n" ¬ª means: Multi-Line Coments can be nested.
    (modify-syntax-entry ?\} "){4nb" TABLE)

    ;; Whitespace (i.e. spaces, tabs, newlines) is conventional:

    (modify-syntax-entry ?\  " " TABLE)
    (modify-syntax-entry ?\t " " TABLE)
    (modify-syntax-entry ?\n ">" TABLE)
    ;; ^ ¬´ \n ¬ª is a ‚Äúcomment-ender‚Äù.

    ;;

    TABLE)

  "MTG Query Mode's `syntax-table-p'.

For example, the hyphen character (i.e. ¬´ - ¬ª) in MTG Query Mode plays several roles:

‚Ä¢ a punctuation character (¬´ - ¬ª) ‚Äî e.g. `(2 - 3)` or `(xs --. y)`.
‚Ä¢ the characters of a (single-line) *start-of-comment* sequence (¬´ -- ¬ª) ‚Äî e.g. ¬´ -- ... ¬ª.
‚Ä¢ the second character of a (multi-line) *start-of-comment* sequence (¬´ {- ¬ª) ‚Äî e.g. ¬´ {- ... ¬ª.
‚Ä¢ the first character of a (multi-line) *end-of-comment* sequence (¬´ -} ¬ª) ‚Äî e.g. ¬´ ... -} ¬ª.

These roles (punctuation and single-line comment and multi-line comment) are represented by this Syntax Entry:

    (modify-syntax-entry ?- \". 123\" `mtg-query-mode-syntax-table')")


==============================================

# `mtg`

the `mtg` package provides libraries for editing custom *MTG* cards, for searching through all *MTG* cards, parsing MTG cards/decklists, and more.

the `mtg` package provides libraries for editing custom *MTG* cards (with syntax-highlighting, completion, abbreviation expansions like `etb<TAB>`, embedded images, *Magic Set Editor* importing/exporting, etc), for searching efficiently through all *MTG* cards (with regular expressions, extensible predicates, etc), and more.



==============================================


;; ^ M-: (defconst sboo-mtg-card-name-list (mtg-data/card-names 'list))
;;
;;       (sboo-mtg-card-name-list)

(defface mtg-card-name '((t :underline t :inherit (mtg-card font-lock-constant-face)))
  "Face for MTG Card Names."
  :group 'mtg-faces)



==============================================

================================================================================


;;----------------------------------------------;;

Four colors
Most decks do not have four full colors. As with three color enemies, if they reach this many colors, it's a shard with a splash of another color. So you're more likely to see something like "American splash black" instead of "Yore".

Names for four-color identities come from one of two sources:

The names of the Nephilims from Guildpact.
The names of the four-colour ‚Äúguild identities‚Äù defined during Commander 2016's design.
Reference the one color the four-color combination is missing, thus Non-(color).
So the four colour identities' names are:

 Blue + black + red + green = Glint-Eye, or Chaos, or Non-white
 Black + red + green + white = Dune (or Dune-Brood), or Aggression, or Non-blue
 Red + green + white + blue = Ink-Treader, or Altruism, or Non-black
 Green + white + blue + black = Witch (or Witch-Maw), or Growth, or Non-red
White + blue + black + red = Yore (or Yore-Tiller), or Artifice, or Non-green

;;----------------------------------------------;;

(defcustom mtg-super-types-list

  '(basic
    legendary
    snow
    ongoing
    world)

  "Known Super-Types.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Supertype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-card-types-list

  '(instant        ; ?üó≤
    sorcery
    land
    artifact
    enchantment
    creature
    planeswalker
    conspiracy)

  "Known Card-Types.

`listp' of `symbolp's."

  :type '(repeat (symbol :tag "Card type"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-spell-subtypes-list

  '(

   )

  "Known Subtypes for spells (i.e. instants and sorceries).

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-land-subtypes-list

  '(

   )

  "Known Subtypes for lands.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-artifact-subtypes-list

  '(

   )

  "Known Subtypes for artifacts.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-enchantment-subtypes-list

  '(

   )

  "Known Subtypes for enchantments.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-creature-subtypes-list

  '(

   )

  "Known Subtypes for creatures.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-planeswalker-subtypes-list

  '(

   )

  "Known Subtypes for planeswalkers.

a `listp' of `symbolp's."

  :type '(repeat (symbol :tag "Subtype"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-subtypes-alist

  '(
    (spell        . mtg-spell-subtypes-list)
    (land         . mtg-land-subtypes-list)
    (artifact     . mtg-artifact-subtypes-list)
    (enchantment  . mtg-enchantment-subtypes-list)
    (creature     . mtg-creature-subtypes-list)
    (planeswalker . mtg-planeswalker-subtypes-list)
   )

  "Known Subtypes, by Card-Type.

an association `listp':

‚Ä¢ from `symbolp'
‚Ä¢ to EITHER a `listp' of `symbolp's OR a `symbolp' thereof.

`mtg-subtypes-alist' represents both ‚Äòinstant‚Äô and ‚Äòsorcery‚Äô
(which are in `mtg-card-types-list') as ‚Äòspell‚Äô
(which isn't in `mtg-card-types-list')."

  :type '(alist :key-type   (symbol :tag "Card type")
                :value-type (choice (variable :tag "List Variable")
                                    (repeat (symbol :tag "Subtypes"))))

  :safe #'listp
  :group 'mtg)









(defcustom mtg-rules-keywords-list

  '(
    absorb
    affinity
    afflict
    aftermath
    amplify
    annihilator
    ascend
    aura-swap
    awaken
    banding
    battle-cry
    bestow
    bloodthirst
    bushido
    buyback
    cascade
    champion
    changeling
    cipher
    conspire
    convoke
    crew
    cumulative-upkeep
    cycling
    dash
    deathtouch
    defender
    delve
    dethrone
    devoid
    devour
    double-strike
    dredge
    echo
    embalm
    emerge
    enchant
    entwine
    epic
    equip
    escalate
    eternalize
    evoke
    evolve
    exalted
    exploit
    extort
    fabricate
    fading
    fear
    first-strike
    flanking
    flash
    flashback
    flying
    forecast
    fortify
    frenzy
    fuse
    graft
    gravestorm
    haste
    haunt
    hexproof
    hidden-agenda
    hideaway
    horsemanship
    improvise
    indestructible
    infect
    ingest
    intimidate
    kicker
    landwalk
    level-up
    lifelink
    living-weapon
    madness
    melee
    menace
    miracle
    modular
    morph
    myriad
    ninjutsu
    offering
    outlast
    overload
    partner
    persist
    phasing
    poisonous
    protection
    provoke
    prowess
    prowl
    rampage
    reach
    rebound
    recover
    reinforce
    renown
    replicate
    retrace
    ripple
    scavenge
    shadow
    shroud
    skulk
    soulbond
    soulshift
    splice
    split-second
    storm
    sunburst
    surge
    suspend
    totem-armor
    trample
    transfigure
    transmute
    tribute
    undaunted
    undying
    unearth
    unleash
    vanishing
    vigilance
    wither
    )

  "Known Keywords (in rules text).

A `symbolp' `listp'.

URL ‚Äòhttps://mtgjson.com/json/Keywords.json‚Äô"

  :type '(repeat (symbol :tag "Keyword"))

  :safe #'listp
  :group 'mtg)





;;==============================================;;

(defconst mtg-known-card-names-count (length mtg-known-card-names)

  "How many unique card names there are known to be.

a `natnump'.

~20,000.")

;; ^ 19,310

;;----------------------------------------------;;

(defconst mtg-known-longest-card-name-length

  (seq-reduce (lambda (*LENGTH* *STRING*) (max *LENGTH* (length *STRING*)))
                mtg-known-card-names
                0)

  "How long is the longest known card name (in English).

a `natnump'.

~30.")

;; ^ 33

;;----------------------------------------------;;

(defun mtg--xfont-by-name (font-name)

  "Lookup an XFont which matches FONT-NAME.

Inputs:

‚Ä¢ FONT-NAME ‚Äî a `stringp'.

Output:

‚Ä¢ a `stringp' or `fontp'.

Examples:

‚Ä¢ M-: (mtg--xfont-by-name \"Beleren\")
    ‚Ü™ nil

‚Ä¢ M-: (mtg--xfont-by-name \"Not A Font Name\")
    ‚Ü™ nil"

  (when (fboundp 'x-list-fonts)
    (car-safe
     (condition-case e                  ; catch "Invalid font name" error.
         (x-list-fonts font-name)
       (error '())))))



(defvar mtg-beleren-font-family)

(defface mtg-card

    `((t :family ,mtg-beleren-font-family))

    "")

;; ^ See function ‚Äòfont-family-list‚Äô.



;;----------------------------------------------;;

(defconst mtg-beleren-font-name "Beleren"

  "Name of the ‚ÄúBeleren‚Äù font.

a ‚Äòstringp‚Äô.

other Beleren fonts include:

‚Ä¢ ‚ÄúBeleren‚Äù
‚Ä¢ ‚ÄúJaceBeleren‚Äù
‚Ä¢ ‚ÄúBelerenSmallCaps‚Äù")

;;----------------------------------------------;;

(defconst mtg-belerensmallcaps-font-name "Beleren Small Caps"

  "Name of the ‚ÄúBeleren Small Caps‚Äù font.

a ‚Äòstringp‚Äô.")

;;---------------------------------------


(defcustom mtg-paragraph-start

  (rx (or "" (0+ (regexp "[ 	]") eol)))




;;==============================================;;
;; Paragraphs:

(defcustom mtg-paragraph-start

  (rx (or "\f" (and (0+ (char blank)) eol)))

  "`paragraph-start' for `mtg-mode'.

a ‚Äòstringp‚Äô or nil."

  :type '(regexp)
  :safe #'stringp
  :group 'mtg)

;;----------------------------;;

(defcustom mtg-paragraph-separate

  (rx (and (0+ (char space))) eol)

  "`paragraph-separate' for `mtg-mode'.

a ‚Äòstringp‚Äô or nil."

  :type '(regexp)
  :safe #'stringp
  :group 'mtg)



(defun mtg--regexp-opt (strings)

  "Return a regular expression matching anything in STRINGS.

Inputs:

‚Ä¢ STRINGS ‚Äî a `listp' of `stringp's.

Output:

‚Ä¢ a `regexp'.
  Matches a syntactic symbol (see Info Node `(emacs) ') which is in STRINGS.

Examples:

‚Ä¢ M-: (mtg--regexp-opt '(\"abc\" \"123\"))
      \"\\_<\\(123\\|abc\\)\\_>\"

Notes:

‚Ä¢ Boundaries are respected.
  i.e. the output doesn't match substrings
  within a word or symbol, only the entire string.

Related:

‚Ä¢ Calls `regexp-opt'"

  (let* ((STRINGS (identity strings))
         )
    (regexp-opt STRINGS 'symbols)))


;;----------------------------------------------;;
(define-abbrev-table 'emacs-lisp-mode-abbrev-table ()
  "Abbrev table for Emacs Lisp mode.
It has `lisp-mode-abbrev-table' as its parent."
  :parents (list lisp-mode-abbrev-table))

;;;###autoload
(defconst mtg-mode-abbrev-table

  (let ((TABLE (make-abbrev-table))
        )

    (abbrev- "cmc" "converted mana cost"     TABLE)
    (abbrev- "etb"  "enters the battlefield" TABLE)
    (abbrev- "ueot" "until end of turn"      TABLE)

    TABLE)

  "Mtg Mode's `abbrev-table-p'.

")


================================================================================

(defun mtg-mode-syntax-propertize (&optional beg end)

  "‚Äòsyntax-propertize-function‚Äô for ‚Äòmtg-mode‚Äô.

This function provides context-sensitive syntax-highlighting.

Inputs:

‚Ä¢ BEG ‚Äî a `number-or-marker-p'.
‚Ä¢ END ‚Äî a `number-or-marker-p'.

See:

‚Ä¢ URL ‚Äòhttp://www.modernemacs.com/post/major-mode-part-1/‚Äô"

  (let* ((BEG (point-min))
         (END (point-max)))

    (let* ((SYNTAX-REGEXP      (rx "" (group-n 1 ()) ""))
           (SYNTAX-DESCRIPTION (string-to-syntax "")))

      (save-excursion
        (goto-char BEG)

        (while (re-search-forward SYNTAX-REGEXP END t nil)
          (let ((MATCH-BEG (match-beginning 1))
                (MATCH-END (match-end       1)))

            (put-text-property MATCH-BEG MATCH-END
                               'syntax-table SYNTAX-DESCRIPTION)))))))




;;----------------------------------------------;;
;;; Faces --------------------------------------;;
;;----------------------------------------------;;


(defgroup mtg-faces nil

  "Fonts and colors for Mtg Mode.

Customize the appearence of `mtg-mode'."

  :prefix "mtg-"
  :group  'mtg)

;;==============================================;;

(progn

  (defface mtg-card `((t :family ,mtg-fonts/mplantin))
    "Base face for MTG Cards."
    :group 'mtg-faces)

  (when (bound-and-true-p mtg-mplantin-font)
    (set-face-font 'mtg-card mtg-mplantin-font)))

;; ^ face ‚Äòmtg-card‚Äô, being a Base-Face, specifies no Face-Attributes (in particularm ‚Äò:inherit‚Äôs no faces);
;;   this prevents shadowing other faces (e.g. the ‚Äòfont-lock-*-face‚Äôs in face ‚Äòmtg-*type‚Äô),
;;   unless explicitly/intentionally specified.
;;

;;----------------------------------------------;;

(progn

  (defface mtg-card-name `((t :underline t :family ,mtg-fonts/beleren :inherit (mtg-card)))
    "Face for MTG Card Names."
    :group 'mtg-faces)

  (when (bound-and-true-p mtg-fonts/beleren)
    (set-face-font 'mtg-card-name mtg-fonts/beleren)))

;;----------------------------------------------;;

(defface mtg-rules-text '((t :inherit mtg-card))
  "Face for MTG Rules Text."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-keyword '((t :weight bold :inherit (mtg-rules-text)))
  "Face for keywords (within Rules Text)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-keyword-abilities '((t :inherit (mtg-keyword)))
  "Face for keyword abilities (within Rules Text)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-keyword-actions '((t :inherit (mtg-keyword)))
  "Face for keyword actions (within Rules Text)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-reminder-text '((t :slant italic :inherit (mtg-rules-text)))
  "Face for MTG Reminder Text."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-ability-word '((t :inherit (mtg-reminder-text)))
  "Face for ability-words (within Rules Text)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-flavor-text '((t :slant italic :inherit mtg-card))
  "Face for MTG Flavor Text."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-typeline-text '((t :slant italic :inherit (mtg-card font-lock-type-face)))
  "Base face for MTG Card/Sub/Super Types."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-card-type '((t :inherit (mtg-typeline-text font-lock-builtin-face)))
  "Base face for MTG Card Types."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-sub-type '((t :inherit mtg-typeline-text))
  "Base face for MTG Card Subtypes."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-super-type '((t :inherit mtg-typeline-text))
  "Base face for MTG Card Supertypes."
  :group 'mtg-faces)

;;----------------------------------------------;;

(progn

  (defface mtg-color-white `((t :foreground ,mtg-white-color :inherit mtg-card))
    "Face for white (white cards, white mana symbols, and Plains)."
    :group 'mtg-faces)

  (put 'white 'mtg-face 'mtg-color-white))

;;----------------------------------------------;;

(progn

  (defface mtg-color-blue `((t :foreground ,mtg-blue-color :inherit mtg-card))
    "Face for blue (blue cards, blue mana symbols, and Islands)."
    :group 'mtg-faces)

  (put 'blue 'mtg-face 'mtg-color-blue))

;;----------------------------------------------;;

(progn

  (defface mtg-color-black `((t :foreground ,mtg-black-color :inherit mtg-card))
    "Face for black (black cards, black mana symbols, and Swamps)."
    :group 'mtg-faces)

  (put 'black 'mtg-face 'mtg-color-black))

;;----------------------------------------------;;

(progn

  (defface mtg-color-red `((t :foreground ,mtg-red-color :inherit mtg-card))
    "Face for red (red cards, red mana symbols, and Mountains)."
    :group 'mtg-faces)

  (put 'red 'mtg-face 'mtg-color-red))

;;----------------------------------------------;;

(progn

  (defface mtg-color-green `((t :foreground ,mtg-green-color :inherit mtg-card))
    "Face for green (green cards, green mana symbols, and Forests)."
    :group 'mtg-faces)

  (put 'green 'mtg-face 'mtg-color-green))

;;----------------------------------------------;;

(defface mtg-symbol '((t :box t :inherit mtg-card))
  "Face for MTG Symbols (including Mana Symbols)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-symbol-white '((t :inherit (mtg-symbol mtg-color-white)))
  "Face for white Mana Symbols."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-symbol-blue '((t :inherit (mtg-symbol mtg-color-blue)))
  "Face for blue Mana Symbols and Islands"
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-symbol-black '((t :inherit (mtg-symbol mtg-color-black)))
  "Face for black Mana Symbols and Swamps."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-symbol-red '((t :inherit (mtg-symbol mtg-color-red)))
  "Face for red Mana Symbols and Mountains."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-symbol-green '((t :inherit (mtg-symbol mtg-color-green)))
  "Face for green Mana Symbols and Forests."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face '((t :inherit mtg-card))
  "Face for an MTG Card Faces (i.e. the background of a card)."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face-white `((t :background ,mtg-white-color :inherit (mtg-face)))
  "Face for the background of white cards."
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face-blue `((t :background ,mtg-blue-color :inherit (mtg-face)))
  "Face for the background of blue cards"
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face-black `((t :background ,mtg-black-color :inherit (mtg-face)))
  "Face for the background of black cards"
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face-red `((t :background ,mtg-red-color :inherit (mtg-face)))
  "Face for the background of red cards"
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-face-green `((t :background ,mtg-green-color :inherit (mtg-face)))
  "Face for the background of green cards"
  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-comment '((t :inherit font-lock-comment-face))

  "Face for comments (beneath MTG Cards)."

  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-string '((t :inherit (mtg-card font-lock-string-face)))

  "Face for strings (within MTG Cards)."

  :group 'mtg-faces)

;;----------------------------------------------;;

(defface mtg-preprocessor '((t :inherit (mtg-card font-lock-preprocessor-face)))

  "Face for preprocessor directives (within MTG Cards)."

  :group 'mtg-faces)




(progn

  (defface mtg-mplantin-italic `((t :family ,mtg-fonts/mplantin-italic :inherit mtg-card))
    "Face for MTG Text in the italicized MPlantin font.

Generally, the bottom of the card:
i.e. the textbox (including Reminder Text, and emphasized Flavor Text or quotation-attributions).

Inherits face ‚Äòmtg-card‚Äô.

See variable ‚Äòmtg-mplantin-italic-font‚Äô."
    :group 'mtg-faces)

  (when (bound-and-true-p mtg-mplantin-italic-font)
    (unless (mtg--set-face-font 'mtg-mplantin-italic mtg-mplantin-italic-font)
      ))



;;----------------------------------------------;;

(defconst mtg-known-land-subtypes

  '(plains island swamp mountain forest
    desert gate lair locust
    tower mine power-plant urza\'s)

  "Known Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ plains island swamp mountain forest ‚Äî are the Basic Land Types.
‚Ä¢ ‚Äúurza's‚Äù, ‚Äútower‚Äù, ‚Äúmine‚Äù, ‚Äúpower-plant‚Äù ‚Äî come from an awkward Rules Update of the Urza Lands (a.k.a. Tron Lands).

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")




;;==============================================;;

(defconst mtg-known-cardtypes

  '("Instant" "Sorcery" "Artifact" "Enchantment" "Land" "Creature" "Planeswalker")

  "Known Cardtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-supertypes

  '("Basic" "Legendary" "Ongoing" "Snow" "World")

  "Known Supertypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-spell-subtypes

  '("Arcane" "Trap")

  "Known Spell (i.e. Instant/Sorcery) Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ the set of Instant Subtypes and the set of Sorcery Subtypes are equivalent in the Comp Rules.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

(defvaralias 'mtg-known-instant-subtypes 'mtg-known-spell-subtypes)

(defvaralias 'mtg-known-sorcery-subtypes 'mtg-known-spell-subtypes)

;;----------------------------------------------;;

(defconst mtg-known-artifact-subtypes

  '("Clue" "Contraption" "Equipment" "Fortification" "Treasure" "Vehicle")

  "Known Artifact Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ Equipment is the most frequent Artifact Subtype.
‚Ä¢ Clue and Treasure are only on tokens (i.e. not on any card)
‚Ä¢ Fortification and Contraption are mentioned once on Futureshifted cards.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;

(defconst mtg-known-enchantment-subtypes

  '("Aura" "Cartouche" "Curse" "Saga" "Shrine")

  "Known Enchantment Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ Aura is the most frequent Enchantment Subtype.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-land-subtypes

  '("Plains" "Island" "Swamp" "Mountain" "Forest"
    "Desert" "Gate" "Lair" "Locust"
    "Tower" "Mine" "Power-Plant" "Urza's")

  "Known Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ plains island swamp mountain forest ‚Äî are the Basic Land Types.
‚Ä¢ ‚Äúurza's‚Äù, ‚Äútower‚Äù, ‚Äúmine‚Äù, ‚Äúpower-plant‚Äù ‚Äî come from an awkward Rules Update of the Urza Lands (a.k.a. Tron Lands).

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-planeswalker-subtypes

  '(
    "Ajani"
    "Aminatou"
    "Angrath"
    "Arlinn"
    "Ashiok"
    "Bolas"
    "Chandra"
    "Dack"
    "Daretti"
    "Davriel"
    "Domri"
    "Dovin"
    "Elspeth"
    "Estrid"
    "Freyalise"
    "Garruk"
    "Gideon"
    "Huatli"
    "Jace"
    "Jaya"
    "Karn"
    "Kasmina"
    "Kaya"
    "Kiora"
    "Koth"
    "Liliana"
    "Nahiri"
    "Narset"
    "Nissa"
    "Nixilis"
    "Ral"
    "Rowan"
    "Saheeli"
    "Samut"
    "Sarkhan"
    "Sorin"
    "Tamiyo"
    "Teferi"
    "Teyo"
    "Tezzeret"
    "Tibalt"
    "Ugin"
    "Venser"
    "Vivien"
    "Vraska"
    "Will"
    "Windgrace"
    "Xenagos"
    "Yanggu"
    "Yanling"
    )

  "Known Planeswalker Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-creature-subtypes

  '(
    "Advisor"
    "Aetherborn"
    "Ally"
    "Angel"
    "Antelope"
    "Ape"
    "Archer"
    "Archon"
    "Army"
    "Artificer"
    "Assassin"
    "Assembly-Worker"
    "Atog"
    "Aurochs"
    "Avatar"
    "Azra"
    "Badger"
    "Barbarian"
    "Basilisk"
    "Bat"
    "Bear"
    "Beast"
    "Beeble"
    "Berserker"
    "Bird"
    "Blinkmoth"
    "Boar"
    "Bringer"
    "Brushwagg"
    "Camarid"
    "Camel"
    "Caribou"
    "Carrier"
    "Cat"
    "Centaur"
    "Cephalid"
    "Chimera"
    "Citizen"
    "Cleric"
    "Cockatrice"
    "Construct"
    "Coward"
    "Crab"
    "Crocodile"
    "Cyclops"
    "Dauthi"
    "Demon"
    "Deserter"
    "Devil"
    "Dinosaur"
    "Djinn"
    "Dragon"
    "Drake"
    "Dreadnought"
    "Drone"
    "Druid"
    "Dryad"
    "Dwarf"
    "Efreet"
    "Egg"
    "Elder"
    "Eldrazi"
    "Elemental"
    "Elephant"
    "Elf"
    "Elk"
    "Eye"
    "Faerie"
    "Ferret"
    "Fish"
    "Flagbearer"
    "Fox"
    "Frog"
    "Fungus"
    "Gargoyle"
    "Germ"
    "Giant"
    "Gnome"
    "Goat"
    "Goblin"
    "God"
    "Golem"
    "Gorgon"
    "Graveborn"
    "Gremlin"
    "Griffin"
    "Hag"
    "Harpy"
    "Hellion"
    "Hippo"
    "Hippogriff"
    "Homarid"
    "Homunculus"
    "Horror"
    "Horse"
    "Hound"
    "Human"
    "Hydra"
    "Hyena"
    "Illusion"
    "Imp"
    "Incarnation"
    "Insect"
    "Jackal"
    "Jellyfish"
    "Juggernaut"
    "Kavu"
    "Kirin"
    "Kithkin"
    "Knight"
    "Kobold"
    "Kor"
    "Kraken"
    "Lamia"
    "Lammasu"
    "Leech"
    "Leviathan"
    "Lhurgoyf"
    "Licid"
    "Lizard"
    "Manticore"
    "Masticore"
    "Mercenary"
    "Merfolk"
    "Metathran"
    "Minion"
    "Minotaur"
    "Mole"
    "Monger"
    "Mongoose"
    "Monk"
    "Monkey"
    "Moonfolk"
    "Mutant"
    "Myr"
    "Mystic"
    "Naga"
    "Nautilus"
    "Nephilim"
    "Nightmare"
    "Nightstalker"
    "Ninja"
    "Noggle"
    "Nomad"
    "Nymph"
    "Octopus"
    "Ogre"
    "Ooze"
    "Orb"
    "Orc"
    "Orgg"
    "Ouphe"
    "Ox"
    "Oyster"
    "Pangolin"
    "Pegasus"
    "Pentavite"
    "Pest"
    "Phelddagrif"
    "Phoenix"
    "Pilot"
    "Pincher"
    "Pirate"
    "Plant"
    "Praetor"
    "Prism"
    "Processor"
    "Rabbit"
    "Rat"
    "Rebel"
    "Reflection"
    "Rhino"
    "Rigger"
    "Rogue"
    "Sable"
    "Salamander"
    "Samurai"
    "Sand"
    "Saproling"
    "Satyr"
    "Scarecrow"
    "Scion"
    "Scorpion"
    "Scout"
    "Serf"
    "Serpent"
    "Servo"
    "Shade"
    "Shaman"
    "Shapeshifter"
    "Sheep"
    "Siren"
    "Skeleton"
    "Slith"
    "Sliver"
    "Slug"
    "Snake"
    "Soldier"
    "Soltari"
    "Spawn"
    "Specter"
    "Spellshaper"
    "Sphinx"
    "Spider"
    "Spike"
    "Spirit"
    "Splinter"
    "Sponge"
    "Squid"
    "Squirrel"
    "Starfish"
    "Surrakar"
    "Survivor"
    "Tetravite"
    "Thalakos"
    "Thopter"
    "Thrull"
    "Treefolk"
    "Trilobite"
    "Triskelavite"
    "Troll"
    "Turtle"
    "Unicorn"
    "Vampire"
    "Vedalken"
    "Viashino"
    "Volver"
    "Wall"
    "Warrior"
    "Weird"
    "Werewolf"
    "Whale"
    "Wizard"
    "Wolf"
    "Wolverine"
    "Wombat"
    "Worm"
    "Wraith"
    "Wurm"
    "Yeti"
    "Zombie"
    "Zubera"
  )

  "Known Creature Subtypes.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Notes:

‚Ä¢ ¬´ (length mtg-known-creature-subtypes) ¬ª is currently .

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-subtypes

  (append mtg-known-spell-subtypes
          mtg-known-artifact-subtypes
          mtg-known-enchantment-subtypes
          mtg-known-land-subtypes
          mtg-known-planeswalker-subtypes
          mtg-known-creature-subtypes)

  "Known Subtypes (of any known Cardtype).

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Merges the ‚Äòmtg-known-*-subtypes‚Äô of all ‚Äòmtg-known-cardtypes‚Äô.

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")

;;----------------------------------------------;;

(defconst mtg-known-types

  (append mtg-known-cardtypes
          mtg-known-supertypes
          mtg-known-subtypes)

  "Known Card/Super/Sub Types.

a ‚Äòlistp‚Äô of ‚Äòsymbolp‚Äôs.

Merges:

‚Ä¢ ‚Äòmtg-known-cardtypes‚Äô
‚Ä¢ ‚Äòmtg-known-supertypes‚Äô
‚Ä¢ ‚Äòmtg-known-subtypes‚Äô

URL ‚Äòhttps://mtgjson.com/json/CardTypes.json‚Äô (circa 2019-07).")



;;----------------------------------------------;;

(defun mtg-type-regexp ()

  "Return a `regexp' matching any MTG Type.

Customize:

‚Ä¢ Variable `mtg-types'"

  (let* ((STRINGS
          (cl-loop for SYMBOL in mtg-known-types
             with STRING = (symbol-name SYMBOL)
             collect STRING)))

    (mtg--regexp-opt STRINGS)))

(defcustom mtg-symbol-alist

  `(
    (tap . ,(mtg-symbol-create :name 'tap :abbreviation 'T :image 'mtg-tap-symbol-svg-image :char 'mtg-tap-symbol-char))

))

================================================================================

;;----------------------------------------------;;
;;; Functions ----------------------------------;;
;;----------------------------------------------;;

;;(cl-loop for STRING in mtg-data/card-names-vector do (intern STRING))

(defun mtg-convert-mana-cost (mana-cost)

  "Return the Converted Mana Cost of MANA-COST.

Inputs:

‚Ä¢ MANA-COST ‚Äî a ‚Äòsymbolp‚Äô ‚Äòlistp‚Äô.

Output:

‚Ä¢ a ‚Äònatnump‚Äô."

  (cl-loop for MANA-SYMBOL in mana-cost
     with CONVERTED-MANA-SYMBOL = (mtg-convert-mana-symbol MANA-SYMBOL)
     sum CONVERTED-MANA-SYMBOL))

;;----------------------------------------------;;

(defun mtg-convert-mana-symbol (mana-symbol)

  "Return the Converted Mana Cost of MANA-SYMBOL (a singleton Mana Cost).

Inputs:

‚Ä¢ MANA-SYMBOL ‚Äî a ‚Äòsymbolp‚Äô.

Output:

‚Ä¢ a ‚Äònatnump‚Äô.
  Defaults to ‚Äò1‚Äô for unknown MANA-SYMBOLS."

  (or (get mana-symbol 'cmc) 1))

================================================================================

;;==============================================;;

(defconst mtg-font-lock-keywords/builtin-keyword

  `(,(mtg-builtin-keyword-regexp) . mtg-keyword)

  "Highlighting MTG Keywords.")

;;----------------------------------------------;;

(defconst mtg-font-lock-keywords/builtin-ability-word

  `(,(mtg-builtin-ability-word-regexp) . mtg-ability-word)

  "Highlighting MTG Ability-Words.")

;;----------------------------------------------;;

(defconst mtg-font-lock-keywords/builtin-type

  `(,(mtg-builtin-type-regexp) . mtg-type-face)

  "Highlighting MTG Types.")

;;----------------------------------------------;;

(defconst mtg-font-lock-keywords/shebang

  `(,(rx buffer-start "#!" (0+ not-newline) eol)
     (0 font-lock-comment-face))

  "Highlighting the ‚Äúshebang line‚Äù (e.g. ¬´ #!/bin/env mtg ¬ª).")

;;----------------------------------------------;;

(defconst mtg-font-lock-keywords

  (list mtg-font-lock-keywords/builtin-keyword
        mtg-font-lock-keywords/builtin-ability-word
        mtg-font-lock-keywords/builtin-type
        mtg-font-lock-keywords/shebang
        mtg-font-lock-keywords/
        mtg-font-lock-keywords/
        )

  "`font-lock-keywords' for `mtg-mode'.

a `listp' associating `stringp's with `facep's (generally).

(For ‚ÄúSearch-based Fontification‚Äù,
a.k.a. ‚ÄúKeyword-based Syntax-Highlighting‚Äù).")

;;----------------------------------------------;;

(defconst mtg-font-lock-defaults

  (let ((mtg-font-lock-keywords-only             nil)  ; both Syntactic Fontification and Search-Based Fontification.
        (mtg-font-lock-keywords-case-fold-search t)    ; Case-Sensitive.
        )
    `(mtg-font-lock-keywords ,mtg-font-lock-keywords-only ,mtg-font-lock-keywords-case-fold-search))

  "`font-lock-defaults' for `mtg-mode'.")


================================================================================





================================================================================

================================================================================

SYNTAX







































README

* `mtg-query` ‚Äî Search Engine for *Magic: The Gathering* cards, with a powerful (and extensible) query language.
* `mtg-mode` ‚Äî Major Mode for editing and rendering custom *Magic: The Gathering* cards.

## Files

* `./lisp/*.el` ‚Äî Elisp Source Files.
* `./test/*.el` ‚Äî Emacs Unit Tests.
* `./data/*.{json,el}.gz` ‚Äî MTG Data.
* `./img/*.gif` ‚Äî *Animated GIFs*.


























MAKEFILE

#

EMACS ?= emacs

EMACSLOADPATH ?= -L./lisp

#

PKG := mtg

SUMMARY := "'

# ^ Extract, from the very first line of the Package File,
#   text between ¬´ --- ¬ª (or bol) and ¬´ -*- ¬ª (or eol).

# 

SRCDIR := ./lisp

SOURCES := $(sort $(wildcard ./$(SRCDIR)/*$(PKG)*.el))
OBJECTS := $(EL:.el=.elc)

# ^ e.g. 
#
# ‚âà (mtg.el mtg-mode.el ‚Ä¶)
# ‚âà (mtg.elc mtg-mode.elc ‚Ä¶)
#

TESTDIR  := ./test
TESTFILE := $(TESTDIR)/test-$(PKG).el

BENCHDIR  := ./bench
BENCHFILE := $(BENCHDIR)/bench-$(PKG).el

#

EmacsRun   := $(EMACS) -Q --batch
EmacsEval  := $(EMACS) --eval

EmacsBuild := $(EMACS) -Q --batch -L$(SRCDIR)
EmacsCheck := $(EMACS) -Q --batch -L$(SRCDIR) -L$(DIR) --load ert

EmacsBench := $(EMACS) -Q --batch -L$(SRCDIR) -L$(BENCHDIR) --load benchmark

#

# ‚Äπ*.el‚Ä∫ ‚Üí ‚Äπ*.elc‚Ä∫

%.el: %.elc

	$(EmacsBuild) -f batch-byte-compile $^

#

build: bytecompile

.PHONY: build

#

check: ert

.PHONY: check

#

bytecompile: $(SOURCES)

	$(EmacsBuild) -f batch-byte-compile $^

.PHONY: bytecompile

#

ert: $(TESTFILE)

	$(EmacsCheck) --load $< -f ert-run-tests-batch-and-exit 

.PHONY: ert

#

bench: $(BENCHFILE)

	$(EmacsBench) --load "bench-$(PKG).el" -f batch-byte-compile 
	$(EmacsBench) --load "bench-$(PKG).elc" -f batch-benchmark-mtg

.PHONY: bench

#

elpa: *.el
	@ver=`grep -o "Version: .*" history.el | cut -c 10-`; \
	dir=history-$$ver; \
	mkdir -p "$$dir"; \
	cp `git ls-files '*.el' | xargs` history-$$ver; \
	echo "(define-package \"history\" \"$$version\" \
	\"Modular in-buffer completion framework\")" \
	> "$$dir"/history-pkg.el; \
	tar cvf history-$$ver.tar "$$dir"

.PHONY: elpa

#

release:

	git fetch && \
	git diff remotes/origin/master --exit-code && \
	git tag -a -m "Release" release-$(VERSION) && \
	# woger lua-l lua-mode lua-mode "release $(VERSION)" "Emacs major mode for editing Lua files" release-notes-$(VERSION) http://github.com/immerrr/lua-mode/ && \

	git push origin master
	@echo 'Send update to ELPA!'

.PHONY: release








test/

(ert-deftest ert-test/mismatch ()

       (should (eql (cl-mismatch "" "") nil))
       (should (eql (cl-mismatch "" "a") 0))
       (should (eql (cl-mismatch "a" "a") nil))
       (should (eql (cl-mismatch "ab" "a") 1))
       (should (eql (cl-mismatch "Aa" "aA") 0))
       (should (eql (cl-mismatch '(a b c) '(a b d)) 2)))

















TESTS

touch .emacs
e .emacs

;; Init...

(setq user-init-file (or load-file-name (buffer-file-name)))
(setq user-emacs-directory (file-name-directory user-init-file))






















BENCHMARKS

;; -*- lexical-binding: t; -*-

;; This is free and unencumbered software released into the public domain.

;;; Commentary:

;; $ emacs -Q -batch -f batch-byte-compile jit-bench.el
;; $ emacs -Q -batch -l jit-bench.elc -f benchmark-batch

;;; Code:

(require 'cl-lib)

(defmacro measure-time (&rest body)
  "Measure and return the running time of the code block."
  (declare (indent defun))
  (garbage-collect)
  (let ((start (make-symbol "start")))
    `(let ((,start (float-time)))
       ,@body
       (- (float-time) ,start))))

;; Test harness

(cl-defun make-random-entry (&key state (min 1) (max 5))
  (cl-loop repeat (+ min (cl-random (1+ (- max min)) state))
           for letter = (+ ?A (cl-random 26 state))
           collect (intern (format "%c" letter))))

(cl-defun make-random-database (&key state (count 100000))
  (cl-loop repeat count collect (make-random-entry :state state)))

(cl-defun benchmark-mtg (f &optional (n 10) (tags '(A B C D E F)))
  (let* ((state (copy-sequence [cl-random-state-tag -1 30 267466518]))
         (db (make-random-database :state state)))
    (cl-loop repeat n
             sum (measure-time
                   (funcall f db tags))
             into total
             finally return (/ total (float n)))))

;; Benchmark candidates:

(defun memq-count (db tags)
  (cl-loop for entry in db count
           (cl-loop for tag in tags
                    when (memq tag entry)
                    return t)))

(defun member-count (db tags)
  (cl-loop for entry in db count
           (cl-loop for tag in tags
                    when (member tag entry)
                    return t)))

(defalias 'memq-alias 'memq)

(defun memq-alias-count (db tags)
  (cl-loop for entry in db count
           (cl-loop for tag in tags
                    when (memq-alias tag entry)
                    return t)))

(defun my-memq (needle haystack)
  (cl-loop for element in haystack
           when (eq needle element)
           return t))

(defun my-memq-count (db tags)
  (cl-loop for entry in db count
           (cl-loop for tag in tags
                    when (my-memq tag entry)
                    return t)))

(defun jit-count (db tags)
  (let* ((lexical-binding (eval-when-compile lexical-binding))
         (memq-list (cl-loop for tag in tags collect `(memq ',tag entry)))
         (function `(lambda (db)
                      (cl-loop for entry in db
                               count (or ,@memq-list))))
         (compiled (byte-compile function)))
    (funcall compiled db)))

(defun benchmark-mtg-batch ()
  (let ((funcs (list 'memq-count
                     'member-count
                     'memq-alias-count
                     'my-memq-count
                     'jit-count)))
    (princ (format "%s\nlexical-binding = %s\n"
                   (version) (eval-when-compile lexical-binding)))
    (dolist (func funcs)
      (princ (format "%-16s %0.3fs\n" func (benchmark func 100))))))

;;; jit-bench-el ends here





















;; IMPORTS...

;; `helm':

(progn
  (declare-function helm              "helm")
  (declare-function helm-marked-candidates "helm")
  (declare-function helm-build-sync-source "helm"))

;; `projectile':

(declare-function projectile-project-root "projectile")

;; Configs...

(require 'mtg)


;;; Makefile:

EmacsLint := $(Emacs) -Q --batch -f elisp-lint-files-batch

DISTFILE := $(PKG)-$(VERSION).tgz

dist:
	rm -f $(DISTFILE)
	git archive --format=tgz "--prefix=$(PKG)/" "--output=$(outdir)/$(DISTFILE)" "v$(VERSION)"

checklint: build
	$(EmacsLint) $(EL)

.PHONY: checklint

checkconf:
	$(Emacs) -q --load .emacs

.PHONY: checkconf

# checkdocs:
# .PHONY: checkdocs


























HELM (MTG-QUERY)



;;; Helm MTG ‚Äî Query Cards...

;; Namespace: ‚Äòmtg-helm/query-card/*‚Äô
;;

;; Features: 
;;
;; ‚Ä¢ Highlighted Matches ‚Äî highlight which part(s) of each result was matched by the query. e.g. if you search for ¬´ @flying ¬ª (i.e. ‚Äúflying in the rules text‚Äù), then ‚Äúflying‚Äù is (1) highlighted in each result, including multiple instances of the word (thus, the user can easily distinguish, for example, ‚Äúflying‚Äù as a keyword on its own line, versus ‚Äúflying‚Äù in the middle of a sentence; and (2) is always present, despite truncation (thus, even if flying comes at the end of several paragraphs rules text, the text before the search term is truncated (which isn't the default), so that the text of the search term is preserved.
;;

;; Constants (MTG Query):

(defconst mtg-helm/query-card/buffer-name-format

  "*Helm MTG * Query Cards * %s *"

  "Format for `mtg-helm/query-card/buffer-name'.")

;;


;;

(defconst mtg-card-default-providers-list

  '("Wizards")

  "Default ‚ÄúProviders‚Äù of MTG Cards.

‚ÄúWizards‚Äù is the only official publisher.

Extended by `mtg-card-extra-providers-list '.")

;; Macros (MTG Query):

;; Variables (MTG Query):

(defvar-local mtg-current-query nil)

;;

(defvar mtg-helm/query-card/history '())

;; Helm Commands (MTG Query):

;;;###autoload
(defun mtg-helm/query-cards ()

  (helm :sources '(mtg-helm/query-card/default-source)

  :buffer (mtg-helm/query-card/buffer-name)

  :prompt 'mtg-helm/query-card/prompt

  :history 'mtg-helm/query-card/history-list

  :mode-line mtg-helm/query-card/mode-line

  :group 'helm-mtg-query))

;;

    :multiline t

    :multimatch nil

;;

(defsubst mtg-helm/query-card/buffer-name ()

  (let* ((PROVIDERS-LIST  (or nil mtg-card-providers-list-default))
         (PROVIDERS-STRING (string-join PROVIDERS-LIST "/")))

    (mtg-helm/query-card/buffer-name-format PROVIDERS-STRING)))

;;

;;

(defun mtg-helm/query-card/modeline-function ()

  "Display (current) printings count & unqiues count in Modeline."

  ())

;;

;; Helm Sources (MTG Query):

(defvar mtg-helm/query-card/default-source

  (helm-build-sync-source :candidates '()

  :init #'mtg-helm/query-card/initialize
 
  :action 'mtg-helm/query-card/actions

  :persistent-action #'mtg-helm/query-card/persistent-action

  :match #'mtg-helm/query-cards/matcher

  :fuzzy-match nil

  :allow-dups nil

  :requires-pattern mtg-helm/query-card/requires-pattern

  :persistent-help "TODO"
)

  "Source of officially-printed MTG Cards, for `mtg-helm/query-cards'.")

;;

(defun mtg-helm/query-cards/matcher (candidate)

  (unless mtg-current-query
    (setq-local mtg-current-query (mtg-parse-query helm-pattern)))

  (let* ((QUERY mtg-current-query))

    ()))

;; Helm Actions (MTG Query):

(defvar mtg-helm/query-card/default-action-help "")

;; (defvaralias 'mtg-helm/query-card/default-action-help ')

(defalias 'mtg-helm/query-card/default-action #')

;;

(defcustom mtg-helm/query-card/actions

  (helm-make-actions mtg-helm/query-card/default-action-help #'mtg-helm/query-card/default-action

    "Copy name(s), newline-separated" #'mtg-helm/query-card/copy-names-action
    "Insert name(s), one-per-line" #'mtg-helm/query-card/insert-names-action

    "Copy whole card(s), newline-separated" #'mtg-helm/query-card/copy-cards-action
    "Insert whole card(s), one-per-line" #'mtg-helm/query-card/insert-cards-action

    "View card image(s), i.e. with artwork" #'mtg-helm/query-card/view-images-action

  ;; non-custom Card Provider only:

    "Browse non-custom card(s), with Scryfall" #'mtg-helm/query-card/browse-scryfall-action
    "Browse non-custom card(s), with Gatherer" #'mtg-helm/query-card/browse-gatherer-action

  ;; multiple Candidates only:

    "Define cards as a new Named Card List, e.g. so you can write a ¬´ ~stuff ¬ª query." #'mtg-helm/query-card/new-named-card-list-action

    )

  "Action List for `helm-mtg/card-names'."

  :type '(alist :key-type string :value-type function)

  :group 'helm-mtg-query)

;;

defun mtg-helm/query-card/default-persistent-action

;;

defun mtg-helm/query-card/persistent-action

;; Customization Groups (MTG Query):

(defgroup helm-mtg-query nil

  :prefix "helm-mtg/")
  :group 'helm-mtg)

;; Customizable Variables (MTG Query):

(defconst helm-mtg/card-names/prompt 

  "MTG Query: "

  "`helm-requires-pattern' for `mtg-helm/query-cards'."

  :type (string)
  :safe #'stringp

  :group 'helm-mtg-query)

;;

(defcustom mtg-helm/query-card/requires-pattern 2

  "`helm-requires-pattern' for `mtg-helm/query-cards'."

  :type (integer)
  :safe #'atom

  :group 'helm-mtg-query)

;;

(defcustom mtg-helm/query-card/history-list

  'mtg-helm/query-card/history

  "List Variable with Minibuffer History for `mtg-helm/query-card'."

  :type (variable :tag "List Variable")
  :safe #'symbolp

  :group 'helm-mtg-query)

;;

(defcustom mtg-helm/query-card/mode-line

  "‚ë† Press ‚ÄπF1‚Ä∫ to... ‚ë° Press ‚ÄπC-j‚Ä∫ to copy the selected/marked names. ‚ë¢ Press ‚ÄπTAB‚Ä∫ to list all actions."

  "`helm-mode-line' for `mtg-helm/query-cards'.")

;;

(defcustom mtg-helm/query-card/mtgjson-uri

  "mtg.json"

  "URI from which to read or fetch the MTGJSON data that populate `mtg-helm/query-card' candidates.

Valid Types:

‚Ä¢ a `stringp'
‚Ä¢ a `symbol', whose `symbol-value' is a Valid Type."

  :type (choice (file     :tag "File")
                (string   :tag "URL")
                (variable :tag "URI Variable"))
  :safe #'stringp

  :group 'helm-mtg-query)

;;


















;;; MTG Helm ‚Äî Card Names...

;; Commands (Card Names):








































TYPES


make-mtg-edition

 (BLOCK (mtg-edition/intern-block .block))

 (CODE (mtg-edition/intern-code .code))

mtg-edition/intern-block

mtg-edition/intern-code





;;; Error Types:

(progn

  (define-error 'mtg-error "Unknown MTG error")

  ;;

  (defconst mtg-error 'mtg-error

    "Parent Error for all MTG Error Types.

=== MTG Error Types ===

an MTG Error Type is an Error Type whose Parent Error Types include (transitively) symbol ‚Äòmtg-error‚Äô. the standard MTG Error Types include:

‚Ä¢ symbol ‚Äòmtg-error‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô
‚Ä¢ symbol ‚Äòmtg-error-‚Äô

new MTG Error Types can be registered via `define-mtg-error' (or ‚Äòdefine-error‚Äô)."))

;;

(defun mtg-error (&optional type data)

  "‚Äòsignal‚Äô an MTG Error.

=== Signature ===

Inputs:

‚Ä¢ TYPE ‚Äî a `symbolp', an MTG Error Type (see variable ‚Äòmtg-error‚Äô).
‚Ä¢ DATA ‚Äî an `objectp'. TYPE-specific, ‚Äòformat‚Äôtable data (also see function ‚Äòsignal‚Äô).

Output: ‚Äòsignal‚Äô doesn't return.

=== Examples ===

M-: (mtg-error)

M-: (mtg-error ')

M-: (mtg-error ')"

  (signal ))

;;

(defmacro define-mtg-error (error-name message &rest parent-error-symbols)

  "‚Äòdefine-error‚Äô for variable ‚Äòmtg-error‚Äôs.

=== Examples ===

M-: (pp-macroexpand (define-mtg-error mtg-data \"No data\"))

 ;; (define-error 'mtg-data \"[MTG] No data\" mtg-error)

"

  (let* ((MESSAGE (concat "[MTG] " message))

  (CHILD-ERROR-SYMBOL (quote error-name))

  (PARENT-ERROR-SYMBOLS (cons mtg-error parent-error-symbols)))

    `(define-error ,CHILD-ERROR-SYMBOL ,MESSAGE ,PARENT-ERROR-SYMBOLS)))

;;

(define-mtg-error 'mtg-data "Data is unavailable or invalid. See function ‚Äòmtg-fetch‚Äô (via ¬´ M-x describe-function RET mtg-fetch RET ¬ª).")

;;






defstruct mtg-multiverse

"An MTG Multiverse is one-or-more MTG Sets and/or (standalone) MTG Cards.

=== Examples ===

Multiverses include:

‚Ä¢ ‚úì Wizards Multiverse ‚Äî Official sets/cards from  WOTC (Wizards of the Coast¬Æ).
‚Ä¢ ‚ùå Reddit Multiverse ‚Äî [TODO] Thousands of custom cards from /r/custommagic, with hundreds of unique mechanics.
‚Ä¢ ‚úì Example Multiverse ‚Äî Tutorial for writing your own custom set with ‚Äòmtg.el‚Äô.

Within this package, all non-custom cards (i.e. those officially printed/spoiled by WOTC, at the time which this version of the package was released) are grouped under the ‚ÄúWizards Multiverse‚Äù.

The ‚ÄúExample Multiverse‚Äù is a tutorial for ‚Äòmtg.el‚Äô (updated and tested against each release of the package). It groups a few sets/cards and a keyword, as a simple example of developing your own custom format (it's located at ¬´ ../examples/mtg-example-multiverse.el ¬ª."

The ‚ÄúReddit Multiverse‚Äù has thousands of custom cards from /r/custommagic, hundreds of custom key words, and a few mature custom sets (e.g. Cyberpunk, Lorado). These are designed / developed / illustrated by many different people and/or collaboratively (sometimes their templating is edited for clarity or validity by myself, Sam Boosalis a.k.a. /u/spriosboosalis). Some cards are popular ones (e.g. by upvotes, by references); some are controversial ones (e.g. with many comments); and some are particularly interesting (to myself).

=== Laws ===

each Multiverse can be considered independent from each other Multiverse: each must be internally consistent, but can be externally inconsistent. For example, while my own custom Multiverse respects the namespace of the Wizards Multiverse, Wizards may later print a card with the same name as a card of mine; ‚Äòmtg.el‚Äô still works (e.g. ‚Äòhelm-mtg‚Äô has a Helm Source for each registered ‚Äòhelm-mtg-multiverses‚Äô).

these ‚ÄúMultiverse Laws‚Äù include:

‚Ä¢ Multiverse Namespace ‚Äî each unique Card must have a unique Card Name. i.e. no other Card in a Multiverse can have an identical Card Name with another Card while differing with in any Rules Fields; e.g. different printings of a card can have different flavor text, but not different rules text."




;;

(defmacro let-mtg-card value &rest body)
  ""
  (let-struct 'mtg-card value @body))


uuid
e.g. "7eb0f276-5e32-5a1e-acfd-9b0ddc19b845"
A universal unique id (v5) generated by MTGJSON. Each entry is unique.

text
e.g. "Reach (This creature can block creatures with flying.)\nDeathtouch (Any amount of damage this deals to a creature is enough to destroy it.)"
Rules text of the card.

names
e.g. ["Nicol Bolas, the Ravager","Nicol Bolas, the Arisen"]
Names of each face on the card. Meld cards are listed in the order of CardA, Meld, CardB.

printings
e.g. ["M19","PM19"]
List of sets the card was printed in, in uppercase.

side
e.g. "a"
Identifier of the side. Used on cards with multiple faces, such as flip, split, transform cards. Can be a, b, or c.




(defconst mtg-default-card-layouts

'( normal, split, flip, transform, meld, leveler, saga, planar, scheme, vanguard, token, emblem, augment, aftermath, host)

(deflist mtg-card-layouts

mtg-default-card-layouts







(require 'let-alist)

;;

(defalias 'mtg--deep-dot-search #let-alist--deep-dot-search)

;;

(defun mtg--access-sexp (symbol variable)
  "Return a sexp used to access SYMBOL inside VARIABLE."
  (let* ((clean (mtg--remove-dot symbol))
         (name (symbol-name clean)))
    (if (string-match "\\`\\." name)
        clean
      (mtg--list-to-sexp
       (mapcar #'intern (nreverse (split-string name "\\.")))
       variable))))

(defun mtg--list-to-sexp (list var)
  "Turn symbols LIST into recursive calls to `cdr' `assq' on VAR."
  `(cdr (assq ',(car list)
              ,(if (cdr list) (mtg--list-to-sexp (cdr list) var)
                 var))))


(let-mtg-card )


















;;; SEQ.EL

;; ‚Äòseq.el‚Äô integration for ‚Äòmtg‚Äô types.




;;; Basic seq functions that have to be implemented by new sequence types
(cl-defgeneric seq-elt (sequence n)
  "Return Nth element of SEQUENCE."
  (elt sequence n))

;; Default gv setters for `seq-elt'.
;; It can be a good idea for new sequence implementations to provide a
;; "gv-setter" for `seq-elt'.
(cl-defmethod (setf seq-elt) (store (sequence array) n)
  (aset sequence n store))

(cl-defmethod (setf seq-elt) (store (sequence cons) n)
  (setcar (nthcdr n sequence) store))






























;;; MAP.EL

;; ‚Äòmap.el‚Äô integration for ‚Äòmtg‚Äô types.

;; (cl-defstruct mtg-card

(defconst mtg-card-keys

  (cl-loop for (NAME . _) in (cl-struct-slot-info 'mtg-card) collect NAME)

  "")


‚Äî Function: cl-struct-sequence-type struct-type
This function returns the underlying data structure for struct-type, which is a symbol. It returns record, vector or list, or nil if struct-type is not actually a structure.

‚Äî Function: cl-struct-slot-info struct-type
This function returns a list of slot descriptors for structure struct-type. Each entry in the list is (name . opts), where name is the name of the slot and opts is the list of slot options given to defstruct. Dummy entries represent the slots used for the struct name and that are skipped to implement :initial-offset.

‚Äî Function: cl-struct-slot-offset struct-type slot-name
Return the offset of slot slot-name in struct-type. The returned zero-based slot index is relative to the start of the structure data type and is adjusted for any structure name and :initial-offset slots. Signal error if struct struct-type does not contain slot-name.

‚Äî Function: cl-struct-slot-value struct-type slot-name inst
Return the value of slot slot-name in inst of struct-type. struct and slot-name are symbols. inst is a structure instance. This routine is also a setf place. Can signal the same errors as cl-struct-slot-offset.

;; (cl-defmethod seq- ((seq mtg-card)) 
;; (cl-defmethod map- ((map mtg-card))






(cl-defgeneric map-into (map type)
  "Convert the map MAP into a map of type TYPE.")

(cl-defmethod map-into (map (_type (eql list))) (map-pairs map))

(cl-defmethod map-into (map (_type (eql alist))) (map-pairs map))

(cl-defmethod map-into (map (_type (eql plist)))
  (let ((plist '()))
    (map-do (lambda (k v) (setq plist `(,k ,v ,@plist))) map)
    plist))

(cl-defmethod map-into (map (_ (eql card)))
  (map-pairs map))

;;

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map-insert (map key value))

(cl-defmethod map-put! (map key value))


(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map-empty-p ((map mtg-card))
  nil)

(cl-defmethod map-contains-key ((map mtg-card) key)
  (cl-case key ))

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())

(cl-defmethod map- ((map mtg-card))
  ())





















;;; JSON

(cl-defun mtg-intern (string)

  "‚Äòintern‚Äô STRING, idiomatically.

Inputs:

‚Ä¢ STRING ‚Äî a ‚Äòstringp‚Äô.

Output:

‚Ä¢ a ‚Äòsymbolp‚Äô.
‚Ä¢ Separators (including: whitespace, underscore, forward/backward slashes, etc) are replaced with hyphens.
‚Ä¢ Casing is normalized (to ‚Äòdowncase‚Äô).

Examples:

‚Ä¢ M-: (mtg-intern \"Merfolk Looter\")
  ‚Üí 'merfolk-looter
‚Ä¢ M-: (mtg-intern \"from_the_vault\")
  ‚Üí 'from-the-vault"

  (let* ((STRING (replace (downcase string))))

    (intern STRING)))

;; M-: (mtg-intern "from_the_vault")
;; 'from-the-vault

;;

(cl-defun mtg-json/mtgjson/parse-multiverse (object &key)

  "Parse an MTG Multiverse from OBJECT, w.r.t. URL ‚Äòhttps://mtgjson.com/files/all-sets/‚Äô."

Inputs:

‚Ä¢ OBJECT ‚Äî a ‚Äòmapp‚Äô.

Output:

‚Ä¢ an `mtg-multiverse-p'.

Calls:

‚Ä¢ `mtg-json/mtgjson/parse-edition'."

  (let* (())

    ()))

;;

;;

(cl-defun mtg-json/mtgjson/parse-edition (object &key)

  "Parse an MTG Edition from OBJECT, w.r.t. URL ‚Äòhttps://mtgjson.com/structures/set/‚Äô."

Inputs:

‚Ä¢ OBJECT ‚Äî a ‚Äòmapp‚Äô.

Output:

‚Ä¢ an `mtg-edition-p'.

Calls:

‚Ä¢ `mtg-json/mtgjson/parse-card'."

  (let* ((ALIST (map-into 'list object))

  (let-alist ALIST

  (let* ((CARDS

  (cl-loop for CARD in (seq-into 'list .cards)

(TRANSLATED-SET-NAMES (mtg-json/mtgjson/parse-edition-name-translations .translations)  ; Translated set name by

  (SIZE  (or .baseSetSize (length CARDS)))

  (KIND (mtg-intern .type)  ; the kind of edition. ; e.g.; archenemy, box, core, commander, draft_innovation, duel_deck, expansion, from_the_vault, funny, masters, masterpiece, memorabilia, spellbook, planechase, premium_deck, promo, starter, token, treasure_chest or vanguard.

  (VERSION (concat .meta.version  ; SemVer specification of the MTGJSON build.
  "-"
.meta.date)  ; ISO-8601 date of the MTGJSON build.
  )))

(make-mtg-edition 

 :name  .name
 :code  .code
 :kind  KIND
 :block .block
 :date  .releaseDate  ; e.g. "2019-01-25" ; Release date in ISO-8601 format for the set.
 :size  SIZE

 :translations TRANSLATED-SET-NAMES ; Translated set name by language.

 :version VERSION

 :cards CARDS))))

;;

;;

(cl-defun mtg-json/mtgjson/parse-card (object &key edition)

  "Parse an MTG Card from OBJECT.

Inputs:

‚Ä¢ OBJECT  ‚Äî a ‚Äòmapp‚Äô.
  w.r.t. URL ‚Äòhttps://mtgjson.com/structures/card/‚Äô.
‚Ä¢ EDITION ‚Äî a ‚Äòstringp‚Äô or ‚Äòsymbolp‚Äô, or nil.
  the MTG Edition which OBJECT was within, if any.

Output:

‚Ä¢ an `mtg-card-p', with an `mtg-card-printing-p'."

  (let* (

(CMC .convertedManaCost)

(TRANSLATIONS (... .foreignData))

(FRAME (make-mtg-card-frame :version .frameVersion
:effect  .frameEffect))

(PRINTING (make-mtg-card-printing 

:edition EDITION-NAME
:rarity .rarity

:border .borderColor
:frame FRAME

:artist .artist

:translations TRANSLATIONS))

(CARD

(make-mtg-card

:colors   .colors
:colorids .colorIdentity

;;

:cmc CMC

;;

:legalities LEGALITIES

:rulings RULINGS

:printings (list PRINTING))))

  CARD)))

;;

;;

;;

(cl-defun mtg-json/mtgjson/parse-token (object &key)

  "Parse an MTG Token from OBJECT, w.r.t. URL ‚Äòhttps://mtgjson.com/structures/token/‚Äô ."

Inputs:

‚Ä¢ OBJECT ‚Äî a ‚Äòmapp‚Äô.

Output:

‚Ä¢ an `mtg-edition-p'.

Calls:

‚Ä¢ `mtg-json/mtgjson/parse-card'."

  (let* ((ALIST (map-into 'list object))

  (let-alist ALIST

)))

::




  
rarity
Rarity. Can be: basic, common, uncommon, rare or mythic

layout
Type of card layout. Can be: normal, split, flip, transform, meld, leveler, saga, planar, scheme, vanguard, token, double_faced_token, emblem, augment, aftermath or host. (If normal, it is usually omitted.)


frameEffect
Values can be: colorshifted, compasslanddfc, devoid, draft, legendary, miracle, mooneldrazidfc, nyxtouched, originpwdfc, sunmoondfc or tombstone.


frameVersion
of the card frame style. Can be: 1993, 1997, 2003, 2015 or future.



Chinese Simplified
Type
string
Example
"‰πôÂ§™‰πã‰π±"
Description
Translation in Chinese Simplified.
Property#
Chinese Traditional
Type
string
Example
"‰πôÂ§™‰πã‰∫Ç"
Description
Translation in Chinese Traditional.
Property#
French
Type
string
Example
"La r√©volte √©th√©rique"
Description
Translation in French.
Property#
German
Type
string
Example
"√Ñther-Rebellion"
Description
Translation in German.
Property#
Italian
Type
string
Example
"Rivolta dell‚ÄôEtere"
Description
Translation in Italian.
Property#
Japanese
Type
string
Example
"ÈúäÊ∞óÁ¥õ‰∫â"
Description
Translation in Japanese.
Property#
Korean
Type
string
Example
"ÏóêÌÖåÎ•¥ Î¥âÍ∏∞"
Description
Translation in Korean.
Property#
Portuguese (Brazil)
Type
string
Example
"Revolta do √âter"
Description
Translation in Portuguese (Brazil).
Property#
Russian
Type
string
Example
"¬´–≠—Ñ–∏—Ä–Ω—ã–π –ë—É–Ω—Ç¬ª"
Description
Translation in Russian.
Property#
Spanish
Type
string
Example
"La revuelta del √©ter"
Description
Translation in Spanish.

;;

(json-false nil)
(json-null  nil)

;; ^ ‚Äòjson-null‚Äô & ‚Äòjson-false‚Äô
;;
;; ‚Ä¢ in JSON, for optional fields under the MTGJSON schema, these coincide:
: ¬´null¬ª values, ¬´false¬ª values, and absent keys.
;;   in Elisp, we represent this equivalence by letting both ‚Äòjson-null‚Äô and ‚Äòjson-false‚Äô be nil, and by returning nil when looking up keys which aren't in the ‚Äòlistp‚Äô / ‚Äòhash-table-p‚Äô.
;;
;;



;;

(cl-defun mtg-json/parse-multiverse (object &key)

  "Parse OBJECT into an MTG Multiverse.

Inputs:

‚Ä¢ OBJECT ‚Äî a `hash-table-p'. [TODO a ‚Äòmapp‚Äô]
  (See `mtg-json/schema').

Output: an `mtg-multiverse-p'.

Calls `mtg-json/parse-set'."

  (let* (())

    ()))

;;


(cl-defun mtg-json/parse-edition (object &key)

  "Parse OBJECT into an MTG Edition (a.k.a. ‚ÄúMTG Set‚Äù).

Inputs:

‚Ä¢ OBJECT ‚Äî a `hash-table-p'. [TODO a ‚Äòmapp‚Äô]
  (See `mtg-json/schema').

Output: an `mtg-set-p'.

Calls `mtg-json/parse-card'."

  (let* (())

  (cl-loop for (KEY . VALUE) in OBJECT by #'

    ()))

;;

(cl-defun mtg-json/parse-card (alist &key)

  "Parse ALIST into an MTG Card.

Inputs:

‚Ä¢ OBJECT ‚Äî a `listp', an ‚Äúalist‚Äù. [TODO a ‚Äòsequence-p‚Äô]
  (See `mtg-json/schema').

Output: an `mtg-card-p'.

Calls `make-mtg-card'."

  (let-alist ALIST

    (make-mtg-card :name .name
: .
: .
: .
: .
: .
: .
: .
: .
: .
: .
: .
: .
: .
: .
:translations .
:rulings .
)))

;;


defalist mtg-json-schema-edition-alist


;;

defalist mtg-json-schema-card-alist

`(
(:name         . name)
:translations . (foreignData . ,#'mtg-json/parse-translations)
:rulings      . (rulings . ,#'mtg-json/parse-rulings)

Maps `keywordp's to `symbolp's:

* the ‚Äòcar‚Äôs are the ‚ÄúKwarglist‚Äù of `make-mtg-card' (i.e. its `keywordp'-based Arglist).

* the ‚Äòcdr‚Äôs are Json Keys of the ultimate / penultimate objects in `mtg-json-file' (where ‚Äòjson-key-type‚Äô is symbol ‚Äòsymbol‚Äô)?

defalist mtg-json-card-translation-schema-alist

;;


NAME ‚Äî

COST ‚Äî

TYPES ‚Äî

COLORS ‚Äî

RULES ‚Äî

POWER ‚Äî

TOUGHNESS ‚Äî

LOYALTY ‚Äî

FACES ‚Äî

SIDES ‚Äî

RARITY ‚Äî

EDITION ‚Äî

FLAVOR ‚Äî

ARTIST ‚Äî

CMC a.k.a. CONVERTEDMANACOST ‚Äî

CARDTYPES ‚Äî

SUBTYPES ‚Äî

SUPERTYPES ‚Äî

CI a.k.a COLORIDENTITY ‚Äî

;;

defalist mtg-json-card-ruling-schema-alist

(:ruling . text) ; e.g. "When Nicol Bolas‚Äôs enters-the-battlefield triggered ability resolves, first the next opponent in turn order (or, if it‚Äôs an opponent‚Äôs turn, that opponent) chooses a card in their hand without revealing it, then each other opponent in turn order does the same. Then all the chosen cards are discarded at the same time."
(:date   . date) ; e.g. "2018-07-13"

URL `https://mtgjson.com/structures/rulings/'

;;

defalist mtg-json-card-translation-schema-alist

URL `https://mtgjson.com/structures/foreign-data/'

'((foreignData name)         . name)       ; e.g. "Palladia-Mors, die Verw√ºsterin"

'((foreignData text)         . rules))       ; e.g. "Fliegend, Wachsamkeit, verursacht Trampelschaden Palladia-Mors, die Verw√ºsterin, hat Fluchsicherheit, falls sie noch keinen Schaden zugef√ºgt hat."

'((foreignData flavorText)   . flavor))       ; e.g. "Schwester von Nicol Bolas. √úberlebende des Krieges der Drachen√§ltesten. Die b√∂sartigste ihrer Art."

'((foreignData multiverseId) . multiverse)  ; e.g. 447637

'((foreignData language)     . language))       ; e.g. "German"

;;

defalist mtg-json-card-legality-schema-alist

URL `https://mtgjson.com/structures/legalities/'

;;



(require 'unicode-progress-reporter)

  (cl-loop with PROGRESS-REPORTER = (make-progress-reporter
                      "collecting ucs names"
                      0 (length names))

        and do (progress-reporter-update PROGRESS-REPORTER count))

        finally (progress-reporter-done PROGRESS-REPORTER)))






(defun helm-ucs-collect-symbols-alist (names)
  "Collect ucs symbols from the NAMES list."
  (cl-loop with pr = (make-progress-reporter
                      "collecting ucs names"
                      0 (length names))
           for (n . v) in names
           for count from 1
           for xcode = (format "#x%x:" v)
           for len = (length xcode)
           for diff = (- (car helm-ucs--max-len) len)
           for code = (format "(#x%x): " v)
           for char = (propertize (format "%c" v)
                                  'face 'helm-ucs-char)
           unless (or (string= "" n)
                      ;; `char-displayable-p' return a font object or
                      ;; t for some char that are displayable but have
                      ;; no special font (e.g 10) so filter out char
                      ;; with no font.
                      (not (fontp (char-displayable-p (read xcode)))))
           collect
           (concat code (make-string diff ? )
                   char "  " n)
           and do (progress-reporter-update pr count)))











































;;; SEARCH

(cl-defstruct mtg-card-match (:include mtg-card))

(cl-defstruct mtg-card-result (:include mtg-card))

;;


(cl-defmacro let-mtg-card (card &rest body)
  "`let-alist' for  `mtg-card-p's.
  `())

;;

;; e.g. ‚Äòhelm-buffers--pattern-sans-filters‚Äô:
;;
(defun helm-buffers--pattern-sans-filters (&optional separator)
  (let* ((SEPARATOR (or separator " ")))
    (cl-loop for PATTERN-MATCHING o in (helm-mm-split-pattern helm-pattern)
           unless (member (substring PATTERN 0 1) '("*" "/" "@" "!"))
           collect PATTERN into LIST
           finally return (string-join LIST SEPARATOR))))
;;

;;

(defun mtg-match-card-p (query card)

  "Whether QUERY matches CARD.

Inputs:

‚Ä¢ QUERY ‚Äî an `mtg-query-p'.
‚Ä¢ CARD  ‚Äî a `mtg-card-p'.

Output: a `booleanp'.

Related:

‚Ä¢ `mtg-match-card-p' is faster than `mtg-match-card-p', but less informative.

Naming:

‚Ä¢ `mtg-match-card' is to `mtg-match-card-p' as `string-match' is to `string-match-p'."

(let-mtg-query QUERY (.mtg-query-name)

 (let-mtg-card CARD (.mtg-card-name)

  (or (and .mtg-query-name (string-match-p .mtg-query-name .mtg-card-name))

      (and .mtg-query- (string-match-p .mtg-query- .mtg-card- ))

      (and .mtg-query- (string-match-p .mtg-query- .mtg-card- ))

      (and .mtg-query- (string-match-p .mtg-query- .mtg-card- ))

      (and .mtg-query- (string-match-p .mtg-query- .mtg-card- ))







  ())


;      (and .mtg-query- (string-match-p .mtg-query- .mtg-card- ))


;;

(defmacro cnf (var list)
  (cl-loop for e in list
           collect `(and (= 0 (% ,var ,e)) ,e) into conditions
           finally return `(or ,@conditions)))

(defun detect-unrolled (x)
  (with-detect x (2 3 5 7 11 13 17 19 23 29 31)))

;;

(defun mtg-match-card (card query)

  "Match QUERY against CARD.

Inputs:

‚Ä¢ CARD  ‚Äî a `mtg-card-p'.
‚Ä¢ QUERY ‚Äî an `mtg-query-p'.

Output is either:

‚Ä¢ nil     ‚Äî i.e. QUERY doesn't match CARD.
‚Ä¢ non-nil ‚Äî i.e. /How/ QUERY matched CARD. Returns a copy of CARD, whose:

    ‚Ä¢ `stringp' fields may be `propertize'd  to annotate a matching sub-QUERY (in particular, with the semantic property ‚Äòmtg-match‚Äô, which may be converted to display properties via `facep's like face ‚Äòhighlight‚Äô or face ‚Äòunderline‚Äô).

    ‚Ä¢ `integerp' fields may be ...

    ‚Ä¢ `listp' fields may be ...

Related:

‚Ä¢ `mtg-match-card' is more informative than `mtg-match-card-p', but slower.
‚Ä¢

Naming:

‚Ä¢ `mtg-match-card' is to `mtg-match-card-p' as `string-match' is to `string-match-p'."

copy-mtg-card


  ())

;;

(defsubst mtg-card-providers-list ()

  (append mtg-default-card-providers-list mtg-extra-card-providers-list)

  "Known ‚ÄúProviders‚Äù of MTG Cards.

See:

‚Ä¢ `mtg-extra-card-providers-list'.
‚Ä¢ `mtg-default-card-providers-list'."


;;

(defcustom mtg-extra-card-providers-list

  '()

  "Additional ‚ÄúProviders‚Äù of MTG Cards.

Extends `mtg-default-card-providers-list'.

Register a provider to group their Custom MTG Cards. 

Different providers should be mutually exclusive (i.e. each card should be provided by a single provider), but can represent any scope/level Examples include: an individual designer, cards that are or were in a custom cube, a weekly design contest, a Custom Card forum, etc."

  :group 'mtg-cards)

;;

(cl-defun mtg-parse-query (query &key)

  "Parse QUERY into an `mtg-query-p'.

Inputs:

‚Ä¢ QUERY ‚Äî a `stringp'.
  User Input in the MTG Query format.
  (TODO see Info Node `MTG Query'.)
  
Output: an `mtg-query-p'."

  (let* (())

    ()))

;;

(defcustom mtg-displayed-newline-default

  "|"

  "How newlines are displayed for cards rendered on one-line.

See `mtg-display-card'.)

;;

(cl-defun mtg-display-card (card &key width displayed-newline no-properties-p no-unicode-p)

  "Display CARD on one-line, prettily.

Output: a `stringp'.

Inputs:

‚Ä¢ CARD ‚Äî an `mtg-card-p'.

‚Ä¢ WIDTH ‚Äî an optional, positive `integerp'.
  Output should be have a `string-width' of WIDTH or less, via:

    ‚Ä¢ Abbreviate ‚Äî Replace longer phrases with their abbreviations
      e.g. ‚Äúc.m.c.‚Äù for ‚Äúconverted mana cost‚Äù; e.g. ‚Äúueot‚Äù for ‚Äúuntil end of turn‚Äù.
    ‚Ä¢ Truncate ‚Äî If WIDTH is still too short, replace the suffixes of MTG Text Fields (including: Rules Text, Card Name, Flavor Text) with ellipses.

‚Ä¢ DISPLAYED-NEWLINE ‚Äî a `stringp' or `characterp'.
  Output has newlines. Thus, newline characters are replaced with DISPLAYED-NEWLINE.
  Defaults (when nil) to `mtg-displayed-newline-default' (which defaults to ‚Äú|‚Äù, i.e. the VERTICAL BAR).

‚Ä¢ NO-PROPERTIES-P ‚Äî a `booleanp'.
  Output is `propertize'd (i.e. colored, bolded, etc) unless NO-PROPERTIES-P is non-nil.

‚Ä¢ NO-UNICODE-P ‚Äî a `booleanp'.
  Output has Non-Ascii Characters unless NO-UNICODE-P is non-nil (i.e. Output has only Ascii Characters if NO-UNICODE-P is nil).
  Unicode Characters can look better and be more concise."

  (let* ((DISPLAYED-NEWLINE (or displayed-newline mtg-displayed-newline-default)))

    ()))


;;

;; URL `https://scryfall.com/docs/syntax'
;;
;; URL `https://magic.wizards.com/en/articles/archive/making-magic/historic-story-2018-04-09'
;;
;; URL `https://nullprogram.com/blog/2016/12/11/'
;;

;; * Scryfall Syntax:
;; 
;;
;; ** Regular Expressions:
;;
;; You can use forward slashes // instead of quotes with the type:, t:, oracle:, o:, flavor:, ft:, and name: keywords to match those parts of a card with a regular expression.

Scryfall supports many regex features such as .*?, option groups (a|b), brackets [ab], character classes \d, \w, and anchors (?!), \b, ^, and $.

Forward slashes inside your regex must be escaped with \/.
;; 
;;
;; 
;; ** Shortcuts / Nicknames (/ Aliases / Abbreviations):
;;
;; The search system includes a few convenience shortcuts for common card sets:

You can find some interesting land groups with is:bikeland (alias cycleland, bicycleland), is:bounceland (alias karoo), is:canopyland (alias canland), is:checkland, is:dual, is:fastland, is:fetchland, is:filterland, is:gainland, is:painland, is:scryland, is:shadowland, is:shockland, is:storageland, is:creatureland, is:triland, and is:tangoland (alias battleland)

You can find all Masterpiece Series cards with is:masterpiece
;;
;;
;; ** Text Search:
;;
;; Use the o: or oracle: keywords to find cards that have specific phrases in their text box.
;;
;; You can put quotes " " around text with punctuation or spaces.
;;
;; You can use ~ in your text as a placeholder for the card‚Äôs name.
;;
;; This keyword usually checks the current Oracle text for cards, so it uses the most up-to-date phrasing available. For example, ‚Äúdies‚Äù instead of ‚Äúis put into a graveyard‚Äù.
;;
;; Use the fo: operator to search full Oracle text only, which includes reminder text.
;;
;;
;; ** Card Names, Exact:
;;
;; If you prefix words or quoted phrases with ! you will find cards with that exact name only.
;; 
;; This is still case-insensitive.
;;
;; 
;; ** Named Predicates (e.g. Multi-Faced Cards, ‚ÄúBatches‚Äù):
;;
;; > You can find cards that have more than one face with is:split (split cards), is:flip (flip cards), is:transform (cards that transform), is:meld (cards that meld), and is:leveler (cards with Level Up)
;;
;; Find cards that are cast as spells with is:spell. Find permanent cards with is:permanent, historic cards with is:historic, modal effects with is:modal, and vanilla creatures with is:vanilla.
;; 
;; 
;; ** Color:
;;
;; > You can find cards that are a certain color using the c: or color: keyword, and cards that are a certain color identity using the id: or identity: keywords.
;;
;; Both sets of keywords accepts full color names like blue or the abbreviated color letters w, u, r, b and g.
;;
;; You can use many nicknames for color sets: all guild names (e.g. azorius), all shard names (e.g. bant), all wedge names (e.g. abzan), and the four-color nicknames chaos, aggression, altruism, growth, artifice are supported.
;;
;; Use c or colorless to match colorless cards, and m or multicolor to match multicolor cards.
;;
;; 
;; ** Types:
;;
;; > Find cards of a certain card type with the t: or type: keywords. You can search for any supertype, card type, or subtype.
;;
;; 
;; ** Mana:
;;
;; > Use the m: or mana: keyword to search for cards that have certain symbols in their mana costs.
;;
;; This keyword uses the official text version of mana costs set forth in the Comprehensive Rules. For example, {G} represents a green mana.
;;
;; Shorthand for is allowed for symbols that aren‚Äôt split: G is the same as {G}
;;
;; However, you must always wrap complex/split symbols like {2/G} in braces.
;;
;; You can find cards of a specific converted mana cost with cmc, comparing with a numeric expression (>, <, =, >=, <=, and !=)
;;
;; You can filter cards that contain hybrid mana symbols with is:hybrid or Phyrexian mana symbols with is:phyrexian
;;
;; >You can use numeric expressions (>, <, =, >=, <=, and !=) to find cards with certain power, power/pow, toughness, toughness/tou, total power and toughness, pt/powtou, or starting loyalty, loyalty/loy.
;;
;;
;; ** Rarity:
;; 
;; Use r: or rarity: to find cards by their print rarity. You can search for common, uncommon, rare, mythic. You can also use comparison operators like < and >=.
;;
;; Use new:rarity to find reprint cards printed at a new rarity for the first time. You can find cards that have ever been printed in a given rarity using in: (for example, in:rare to find cards that have ever been printed at rare.)
;; 
;;
;; ** Sets/Blocks:
;;
;;
;; ** Format/Legality:
;;
;; Use the f: or format: keywords to find cards that are legal in a given format.

You can also find cards that are explicitly banned in a format with the banned: keyword and restricted with the restricted: keyword.

The current supported formats are: standard, modern, legacy, vintage, commander, future (future Standard), pauper, frontier, penny (Penny Dreadful), duel (Duel Commander), and oldschool (Old School 93/94).

You can use is:commander to find cards that can be your commander.

Finally, you can find cards on the Reserved List with is:reserved.
;;
;;
;; ** Dates / Reprints:
;;
;;
;; ** Languages:
;;
;;
;; ** Artist/Flavor/Watermark:
;;
;; Search for cards illustrated by a certain artist with the a:, art:, or artist: keywords.

Search for words in a card‚Äôs flavor text using the ft: or flavor: keywords.

Search for a card‚Äôs affiliation watermark using the wm: or watermark: keywords, or match all cards with watermarks using has:watermark.

For any of these, you can wrap statements with spaces or punctuation in quotes " ".

You can find cards being printed with new illustrations using new:art, being illustrated by a particular artist for the first time with new:artist, and with brand-new flavor text using new:flavor.
;;
;;
;;
;; ** Border/Frame/Foil/Resolution:
;;
;; Use the border: keyword to find cards with a black, white, silver, or borderless border.

You can find cards with a specific frame editiong using frame:1993, frame:1997, frame:2003, frame:2015, and frame:future. You can also search for particular frame-effects, such as frame:legendary, frame:colorshifted, frame:tombstone, frame:nyxtouched.

You can find cards with full art using is:full.

new:frame will find cards printed in a specific frame for the first time.

Each card is available in non-foil, in foil, or in both. You can find prints available in each with is:nonfoil and is:foil, or is:foil is:nonfoil to find prints (like most booster cards) available in both.

You can find cards in our database with high-resolution images using is:hires.
;;
;;
;; ** Logical Negation:
;;
All keywords except for include can be negated by prefixing them with a hyphen (-). This inverts the meaning of the keyword to reject cards that matched what you‚Äôve searched for.

The is: keyword has a convenient inverted mode not: which is the same as -is:. Conversely, -not: is the same as is:.

Loose name words can also be inverted with -
;;
;;
;; Syntax for Display/Layout of Search Results:
;;
You can enter your display options for searches as keywords rather than using the controls on the page.

Select how duplicate results are eliminated with unique:cards, unique:prints (previously ++), or unique:art (also @@).

Change how results are shown with display:grid, display:checklist, display:full, or display:text.

Change how results are sorted with order:artist, order:cmc, order:power, order:toughness, order:set, order:name, order:usd, order:tix, order:eur, order:rarity, order:color, order:released, order:spoiled, or order:edhrec.

Select what printings of cards to preferentially show with prefer:oldest, prefer:newest, prefer:usd-low or prefer:usd-high (and the equivalents for tix and eur), or prefer:promo.

Change the order of the sorted data with direction:asc or direction:desc.
;;
;;



;; ‚Äòmtg.el‚Äô ‚ÄúBatches‚Äù:
;; 
;; Named Predicates:
;;
‚Ä¢ Spell ‚Äî Instant, Sorcery.
‚Ä¢ Permanent ‚Äî Land, Creature, Artifact, Enchantment, Planeswalker.
‚Ä¢ Historic ‚Äî Artifact, Legendary, Saga. (interestingly: Legendary is a super type, Artifact is a card type, and Saga is a sub type.)
‚Ä¢
‚Ä¢ Arbor ‚Äî Treefolk, Forest. ("Arbor" is *Latin* for "Tree".)
‚Ä¢ Lupine ‚Äî Wolf, Werewolf (+ Wolves and/or Werewolves). ("Lupine" is *Latin* for "Wolfy".)
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
;;

;; Example Queries:
;;
‚Ä¢ ¬´ @SUBTYPE ¬ª ‚Äî I used this to find most ‚ÄúLords‚Äù, for the ¬´ ~lord ¬ª query. ¬´ SUBTYPE ¬ª is a variable, interpolated with any subtypes of the current card. For example, it finds all ‚ÄπElves‚Ä∫ that talk about other ‚ÄπElves‚Ä∫ in their Rules Text. When matching an ‚ÄπElf‚Ä∫ ‚ÄπWarrior‚Ä∫, ¬´ @SUBTYPE ¬ª expands to ¬´ (match-rules-text (rx-mtg (or "Elf" "Elves" "Warrior" "Warriors")) ¬ª. It finds ‚ÄúGeneralized Lords‚Äù like ‚ÄπEladamri, Lord of Leaves‚Ä∫ (i.e. not just ¬´ TYPE [creatures] [you control] get +1/+1 ¬ª). NOTE it doesn't find, for example, ‚ÄπSoraya the Falconer‚Ä∫, which is a ‚Äú‚ÄπBird‚Ä∫ Lord‚Äù that's a ‚ÄπHuman‚Ä∫.
;;
‚Ä¢ ¬´ @(rx-mtg (words (any TYPE) (| "or" "and" "and/or") (any TYPE))) ¬ª ‚Äî I used this to find new ‚ÄúBatches‚Äù, for type queries like ¬´ *arbor ¬ª or ¬´ *lupine ¬ª, and for text queries like ¬´ @arbor ¬ª or ¬´ @lupine ¬ª. e.g ¬´ *arbor ¬ª matches both ‚ÄπDryad Arbor‚Ä∫ and ‚ÄπDoran‚Ä∫; e.g ¬´ @arbor ¬ª matches ‚ÄπTreefolk Harbinger‚Ä∫.
;;
‚Ä¢ Ambassadors ‚Äî c.f. ‚ÄπAmbassador Oak‚Ä∫: ‚ÄúWhen ~ enters the battlefield, create a 1/1 green Elf Warrior creature token.‚Äù. 
;;
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 
;;


(defconst mtg-normalize-card-name-regexp
"[-,' \f\t\n\r\v]+"

  "Regexp for splitting / joining in `mtg-normalize-card-name'.

Extends `split-string-default-separators' with punctuation for proper nouns (in English).")

(defvar mtg-card-name-obarray

  "‚Äòobarray‚Äô for interning Card Names.")


(defun mtg-intern-card-name (name)

"‚Äòintern‚Äôs NAME (a Card Name) in `mtg-card-name-obarray'.

Inputs a `stringp'. Outputs a `symbolp'.

e.g...

M-: (mtg-intern-card-name \"Kiki-Jiki, Mirror Breaker\")
  'mtg/kiki-jiki-mirror-breaker"

  (let* ((STRING (mtg-qualify-card-name (mtg-normalize-card-name name))))

  (intern STRING mtg-card-name-obarray)))


(defun mtg-normalize-card-name (name)

"Normalizes NAME (a Card Name).

Inputs a `stringp'. Outputs a `stringp'."

  (downcase (join-string (save-match-data (split-string name mtg-normalize-card-name-regexp)) :omit-nulls ) "-")))


(defun mtg-qualify-card-name (name)

"Qualify NAME (a Card Name) under a package-specific (nonstandard) namespace.

Qualifies with symbol ‚Äòmtg/‚Äô."

Inputs a `stringp'. Outputs a `stringp'."

  (declare (pure t))
 
  (concat "mtg/" name))















;;; RX

;; 

;;

(defun rx-and (form)
  "Parse and produce code from FORM.
FORM is of the form `(and FORM1 ...)'."
  (rx-check form)
  (rx-group-if
   (mapconcat (lambda (x) (rx-form x ':)) (cdr form) nil)
   (and (memq rx-parent '(* t)) rx-parent)))



(define-arx url-rx

    '((http     (seq bos (group "http") "://") )

      (https    (seq bos (group "https") "://") )

      (https?   (seq bos (group "http" (optional "s")) "://") )

      (protocol (seq bos (group (1+ (not (any ":")))) "://"))

      (host     (group (1+ (not (any "/")))))

      (path     (group "/" (1+ (not (any "?")))))

      (query    (seq "?" (group (1+ (not (any "#"))))))

      (fragment (seq "#" (group (1+ anything))))))






















JIT

(let ((lexical-binding t))
  (byte-compile #'foo))


















;;; Eldoc

;; 

;;






















;;; Toolbar:



















;;; Menubar:
 


















;;; Syntax

(defvar lua-sexp-alist '(("then" . "end")
                      ("function" . "end")
                      ("do" . "end")
                      ("repeat" . "until")))






























;;; Indentation

(defun lua-indent-line ()
  "Indent current line for Lua mode.
Return the amount the indentation changed by."
  (let (indent
        (case-fold-search nil)
        ;; save point as a distance to eob - it's invariant w.r.t indentation
        (pos (- (point-max) (point))))
    (back-to-indentation)
    (if (lua-comment-or-string-p)
        (setq indent (lua-calculate-string-or-comment-indentation)) ;; just restore point position
      (setq indent (max 0 (lua-calculate-indentation nil))))

    (when (not (equal indent (current-column)))
      (delete-region (line-beginning-position) (point))
      (indent-to indent))

    ;; If initial point was within line's indentation,
    ;; position after the indentation.  Else stay at same point in text.
    (if (> (- (point-max) pos) (point))
        (goto-char (- (point-max) pos)))

    indent))

;;

(defun lua-calculate-string-or-comment-indentation ()
  "This function should be run when point at (current-indentation) is inside string"
  (if (and (lua-string-p) (not lua-indent-string-contents))
      ;; if inside string and strings aren't to be indented, return current indentation
      (current-indentation)

    ;; At this point, we know that we're inside comment, so make sure
    ;; close-bracket is unindented like a block that starts after
    ;; left-shifter.
    (let ((left-shifter-p (looking-at "\\s *\\(?:--\\)?\\]\\(?1:=*\\)\\]")))
      (save-excursion
        (goto-char (lua-comment-or-string-start-pos))
        (+ (current-indentation)
           (if (and left-shifter-p
                    (looking-at (format "--\\[%s\\["
                                        (match-string-no-properties 1))))
               0
             lua-indent-level))))))

;;

(defun lua-calculate-indentation (&optional parse-start)
  "Return appropriate indentation for current line as Lua code."
  (save-excursion
    (let ((continuing-p (lua-is-continuing-statement-p))
          (cur-line-begin-pos (line-beginning-position)))
      (or
       ;; when calculating indentation, do the following:
       ;; 1. check, if the line starts with indentation-modifier (open/close brace)
       ;;    and if it should be indented/unindented in special way
       (lua-calculate-indentation-override)

       (when (lua-forward-line-skip-blanks 'back)
         ;; the order of function calls here is important. block modifier
         ;; call may change the point to another line
         (let* ((modifier
                 (lua-calculate-indentation-block-modifier cur-line-begin-pos)))
           (+ (current-indentation) modifier)))

       ;; 4. if there's no previous line, indentation is 0
       0))))

;;



;;








;;; Abbrev

(defvar lua-mode-abbrev-table nil
  "Abbreviation table used in lua-mode buffers.")

(define-abbrev-table 'lua-mode-abbrev-table
  '(("end"    "end"    lua-indent-line :system t)
    ("else"   "else"   lua-indent-line :system t)
    ("elseif" "elseif" lua-indent-line :system t)))































;;; Skeletons





























;;; COMPANY

;; URL `http://sixty-north.com/blog/a-more-full-featured-company-mode-backend.html'

;;

(defconst mtg-words-default

  '()

  "Default list of all words used among Card Names, Rules Text, and Super/Sub/Card Types.")

;;

(defun company-mtg/doc-buffer (candidate)

"`:doc-buffer' for `company-mtg'."

  (pcase candidate
(NAME . KIND)

    (company-doc-buffer "")))

;;

;;

(defun mtg-company/propertize-card (text initials summary)

  (propertize text :initials initials :summary summary))

;; M-: (example/propertize-biography "alan" "AMT" "Alan Mathison Turing, OBE, FRS (/Ààtj ä…ôr…™≈ã/ tewr-ing; 23 June 1912 ‚Äì 7 June 1954) was a British mathematician, logician, cryptanalyst, philosopher, pioneering computer scientist, mathematical biologist, and marathon and ultra distance runner.")

#("alan" 0 1 (:initials "AMT"
              :summary  "Alan Mathison Turing, OBE, FRS (/Ààtj ä…ôr…™≈ã/ tewr-ing; 23 June 1912 ‚Äì 7 June 1954) was a British mathematician, logician, cryptanalyst, philosopher, pioneering computer scientist, mathematical biologist, and marathon and ultra distance runner."))

(defun mtg-company/render-annotation (text)

  "Render TEXT, extract `mtg-company/propertize-card' props."

  (format " [%s]" (get-text-property 0 :initials text)))



;; Imports...

(require 'company)

;; Constants...

(defconst sample-completions

  '(#("alan" 0 1
      (:initials
      "AMT"
      :summary
      (concat "Alan Mathison Turing, OBE, FRS (/Ààtj ä…ôr…™≈ã/ "
              "tewr-ing; 23 June 1912 ‚Äì 7 June 1954) was a "
              "British mathematician, logician, cryptanalyst, "
              "philosopher, pioneering computer scientist, "
              "mathematical biologist, and marathon and ultra "
              "distance runner.")))

    #("john" 0 1
      (:initials
      "JVN"
      :summary
      (concat "John von Neumann (/v…ín Ààn…î…™m…ôn/; December 28, "
              "1903 ‚Äì February 8, 1957) was a Hungarian and "
              "American pure and applied mathematician, physicist, "
              "inventor and polymath.")))

    #("ada" 0 1
      (:initials
      "AAK"
      :summary
      (concat "Augusta Ada King, Countess of Lovelace (10 December "
              "1815 ‚Äì 27 November 1852), born Augusta Ada Byron "
              "and now commonly known as Ada Lovelace, was an "
              "English mathematician and writer chiefly known for "
              "her work on Charles Babbage's early mechanical "
              "general-purpose computer, the Analytical Engine.")))

    #("don" 0 1
      (:initials
      "DEK"
      :summary
      (concat "Donald Ervin Knuth (/k…ôÀànuÀêŒ∏/[1] k…ô-nooth; born "
              "January 10, 1938) is an American computer "
              "scientist, mathematician, and Professor Emeritus "
              "at Stanford University.")))))

;; Functions...

(defun sample-annotation (s)

  (format " [%s]" (get-text-property 0 :initials s)))

;;

(defun sample-meta (s)

  (get-text-property 0 :summary s))

;;

(defun sample-fuzzy-match (prefix candidate)

  (cl-subsetp (string-to-list prefix)
              (string-to-list candidate)))

;; Company Backend...

(defun company-sample-backend (command &optional arg &rest ignored)

  "Company Backend sample with Fuzzy Matching, Popup Menu annotations, and Echo Area metadata."

  (interactive (list 'interactive))

  (case command

    (interactive (company-begin-backend 'company-sample-backend))

    (prefix (and (eq major-mode 'fundamental-mode)
                (company-grab-symbol)))

    (candidates
    (remove-if-not
      (lambda (c) (sample-fuzzy-match arg c))
      sample-completions))

    (annotation (sample-annotation arg))

    (meta (sample-meta arg))

    (no-cache 't)))

;;









;; Capitalization in Card Names:
;;
;; ‚Ä¢ Articles, like ‚Äúthe‚Äù, are lowercase, unless they're the very first word, e.g.:
;;
;;     ‚Ä¢ ¬´ The Abyss ¬ª
;;     ‚Ä¢ ¬´ Advice from the Fae ¬ª
;;
;;
;;



















;;; HELM:

;; Helm MTG ‚Äî All Names...

;; Helm Commands (MTG Names):


(defun helm-mtg/names ()

  "Helm Command for all names of Cards/Sets/Keywords/Artists/Colors/Formats/‚Ä¶

Merges these Helm Sources:

‚Ä¢ `helm-mtg/-names/default-source'
‚Ä¢ `helm-mtg/card-names/default-source'
‚Ä¢ `helm-mtg/edition-names/default-source'
‚Ä¢ `helm-mtg/keyword-names/default-source'
‚Ä¢ `helm-mtg/subtype-names/default-source'
‚Ä¢ `helm-mtg/cardtype-names/default-source'
‚Ä¢ `helm-mtg/supertype-names/default-source'
‚Ä¢
‚Ä¢ `helm-mtg/color-names/default-source'
‚Ä¢ `helm-mtg/rarity-names/default-source'
`helm-mtg/card-layout-names/default-source'
‚Ä¢ `helm-mtg/card-frame-names/default-source'
‚Ä¢ `helm-mtg/artist-names/default-source'
‚Ä¢ `helm-mtg/watermark-names/default-source'
‚Ä¢
‚Ä¢ `helm-mtg/block-names/default-source'
‚Ä¢ `helm-mtg/format-names/default-source'"

(helm :sources '()

 :buffer "*Helm MTG Names*"))




(defconst helm-mtg/card-name-prompt "Card Name: ")

(defvar 'helm-mtg/card-name-history '())

(defcustom helm-mtg/card-name-actions

  '(("" . t)
    ("" . t))

  "Action List for `helm-mtg/card-names'."

  :type '(alist :key-type string :value-type function)

  :group 'helm-mtg)


(defun helm-mtg/card-names-initialize ()

;;TODO append to a Text Register, move it to the Kill Ring (i.e. Clipboard) as either (1) a different (non-persistent) action or (2) as a finalizer before `helm-quit'.

  )


(defun helm-mtg/card-names-persistent-action (_)

;;TODO append to a Text Register, move it to the Kill Ring (i.e. Clipboard) as either (1) a different (non-persistent) action or (2) as a finalizer before `helm-quit'.

  )


;;;###autoload
(defun helm-mtg/card-names ()

(helm :sources 

 :buffer "*Helm MTG Card Names*"

 :prompt 'helm-mtg/card-name-prompt

 :init #'helm-mtg/card-names-initialize

 :mode-line "‚ë† Press ‚ÄπF1‚Ä∫ to... ‚ë° Press ‚ÄπC-j‚Ä∫ to copy the selected/marked names. ‚ë¢ Press ‚ÄπTAB‚Ä∫ to list all actions."

 :persistent-help "?"

 :history 'helm-mtg/card-name-history
 
  :persistent-action #'helm-mtg/card-names-persistent-action

  :action 'helm-mtg/card-name-actions

  :group 'helm-mtg)



    :multiline t

    :multimatch nil

    :requires-pattern 2



(defun mtg-helm//get-selected-or-marked-candidates (&optional _candidate)

  "Get both the Selected Candidate and any Marked Candidates.

Related:

* `helm-get-selection' 
* `helm-marked-candidates'"

  (let* ((SELECTED (helm-get-selection))

         (MARKED (helm-marked-candidates))

    (cons SELECTED MARKED)))



;; TODO *Source*-specific help via `(helm :message helm-mtg/card-names-source-help-string)`; displayed under ‚ÄπC-h m‚Ä∫ and ‚ÄπC-c ?‚Ä∫.




(defun helm-delete-backward-no-update (arg)
  "Disable update and delete ARG chars backward.
Update is reenabled when idle 1s."
  (interactive "p")
  (with-helm-alive-p
    (unless helm--suspend-update-interactive-flag
      (helm-suspend-update 1))
    (backward-delete-char arg)
    (run-with-idle-timer
     1 nil
     (lambda ()
       (unless helm--suspend-update-interactive-flag
         (helm-suspend-update -1)
         (helm-check-minibuffer-input)
         (helm-force-update))))))
(put 'helm-delete-backward-no-update 'helm-only t)


































;;; Effects







TODO

different naming conventions:

mtg-json-schema-edition-alist
mtg-edition-json-schema-alist
mtg-json/schema-edition-alist
mtg-json/edition-schema-alist
mtg-json-set-schema-alist
mtg-set-json-schema-alist
mtg-json-schema-set-alist











================================================================================








================================================================================