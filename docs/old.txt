;;----------------------------------------------;;

data XdgDirectory

  = XdgData
    -- ^ For data files (e.g. images).
    --   Defaults to @~\/.local\/share@ and can be
    --   overridden by the @XDG_DATA_HOME@ environment variable.
    --   On Windows, it is @%APPDATA%@
    --   (e.g. @C:\/Users\//\<user\>/\/AppData\/Roaming@).
    --   Can be considered as the user-specific equivalent of @\/usr\/share@.

  | XdgConfig
    -- ^ For configuration files.
    --   Defaults to @~\/.config@ and can be
    --   overridden by the @XDG_CONFIG_HOME@ environment variable.
    --   On Windows, it is @%APPDATA%@
    --   (e.g. @C:\/Users\//\<user\>/\/AppData\/Roaming@).
    --   Can be considered as the user-specific equivalent of @\/etc@.

  | XdgCache
    -- ^ For non-essential files (e.g. cache).
    --   Defaults to @~\/.cache@ and can be
    --   overridden by the @XDG_CACHE_HOME@ environment variable.
    --   On Windows, it is @%LOCALAPPDATA%@
    --   (e.g. @C:\/Users\//\<user\>/\/AppData\/Local@).
    --   Can be considered as the user-specific equivalent of @\/var\/cache@.

;;----------------------------------------------;;

(pcase sboo-xdg-platform

  ('posix ())

  ('windows ())
  
  (_ ()))

;;----------------------------------------------;;


(cl-defun sboo-xdg-xyz (path &key subdir)

  "Make an xdg path for xyz files, from PATH.

Inputs:

• PATH   — a string. the suffix of the filepath to output.
• SUBDIR — a string. if non-nil (or absent), prefix PATH with SUBDIR.

Output: a string. \"$XDG_XYZ_HOME/SUBDIR/PATH\".

Example:

• M-: (sboo-xdg-xyz \"directory/basename.txt\")
      \"~/.directory/basename.txt\"

• M-: (sboo-xdg-xyz \"basename.txt\" :subdir \"directory\")
      \"~/.directory/basename.txt\"

« $XDG_XYZ_HOME » defaults to:

• « ~/.xyz » — on POSIX.
• «  » — on Windows.'

Use for (e.g. ).

See URL `https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html'.

Related:

• `sboo-xdg-xyz-default'
• `sboo-xdg-xyz-environment'"

  (let ((XdgPathEnvironment (getenv "XDG_XYZ_HOME"))
        (XdgPathDefault     "~/.xyz")
        (XdgPath            (if XdgPathEnvironment
                                XdgPathEnvironment
                              (file-name-as-directory XdgPathDefault)))
        (SubDirectory       (if subdir
                                (file-name-as-directory subdir)
                              ""))
        )

    (file-truename (cocnat XdgPath Subdir Path))))

;;----------------------------------------------;;


(defun sboo-next-buffer (count)
 
  "Move COUNT buffers 'forwards'.
"

  (interactive )

  (progn
  
    ()))

(defun sboo-prior-buffer (count)
 
  "Move COUNT buffers 'backwards'.
"

  (interactive )

  (progn
  
    ()))

;;----------------------------------------------;;

(defconst platform

  (cond                                 ;TODO pcase `(,system-type ,window-system)

   ((or (memq system-type   '(gnu/linux)))

    'platform-linux)

   ((or (memq system-type   '(cygwin windows-nt ms-dos))
        (memq window-system '(w32 pc)))

    'platform-windnows)

   ((or (memq system-type   '(darwin))
        (memq window-system '(mac ns)))

    'platform-apple)

   ((or (eq window-system 'x))  ;; TODO and Wayland?
    ;; ^ X11 runs on non-Linux operating-systems too (like Apple).

    'platform-linux)

   (t
    'platform-unknown))

  "The current platform, a symbol (prefixed with `platform-').

One of: 

* 'platform-linux
* 'platform-windows
* 'platform-apple
* 'platform-unknown

Depends on the variables `system-type' and `window-system'.")

;;----------------------------------------------;;

  (pcase `(,system-type . ,window-system)

    ( `( ,(or 'gnu/linux) . ,_ )

      'platform-linux)

    ( `( ,_ . ,_ )

      'platform-unknown))

;;----------------------------------------------;;

  (pcase (list system-type window-system)

    ( `(,(or 'gnu/linux) ,_)

      'platform-linux)

    ( ,_

      'platform-unknown))

  
;;----------------------------------------------;;
  (use-package dante
    :after    haskell

    :commands (dante-mode dante-restart)

    :bind (:map haskell-mode-map
                (("C-c d" . sboo-dante-mode)))

;;;  :hook ((haskell-mode . flycheck-mode)
;;;         (haskell-mode . dante-mode))

    :init
    (add-hook 'haskell-mode-hook #'flycheck-mode)
    (add-hook 'haskell-mode-hook #'dante-mode)

    :config
    (setq dante-repl-command-line-methods-alist
          sboo-dante-repl-command-line-methods-alist)

    (setq sboo-haskell-eldoc 'dante)

    (setq dante-tap-type-time 2)

    ())

;;----------------------------------------------;;

(defun sboo--ghc-pragma-read (prompt candidates)

  "Read a candidate from CANDIDATES.

Output:

• a string.

Related:

• `sboo-ghc-pragma-read-pragma'.
• `sboo-ghc-pragmas-alist'."

  (interactive)

  (completing-read (format "%s: " prompt)
                   candidates))

;;----------------------------------------------;;

(defun sboo-ghc-pragma-read-pragma ()

  "Read a GHC pragma.

Related:

• `sboo-ghc-pragmas-alist'."

  (interactive)

  (let ((prompt     "Pragma")
        (candidates sboo-ghc-pragmas)
        )

    (completing-read (format "%s: " prompt)
                     candidates)))

;;----------------------------------------------;;

(defun sboo-ghc-pragma-insert-pragma (&optional pragma)

  "Insert a GHC pragma, reading it if PRAGMA is nil.

Related:

• `sboo-ghc-pragma-read-pragma'."

  (interactive (list
                (sboo-ghc-pragma-read-pragma)))

  (let* ((STRING (format "{-# %s #-}" pragma))
         )

    (insert STRING "\n")))

;;----------------------------------------------;;

(defalias 'sboo-ghc-read-WARNING    #'sboo-ghc-read-string)
(defalias 'sboo-ghc-read-DEPRECATED #'sboo-ghc-read-string)

;;----------------------------------------------;;
sboo-ghc-get-names-of-definitions-current-file
;;----------------------------------------------;;
(defmacro sboo-move-to-head-of-alist! (key alist)

  "Move KEY and its value to the `car' of ALIST.

Inputs:

• KEY — is one of: `symbolp', `stringp', or `numberp'.

• ALIST — is an `alist' variable. 
          its key-type is equal to the `type-of' KEY.

Output:

• an `alist'.

• ALIST is mutated too."

  `(setq ,variable (append ,list ,variable)))

;;----------------------------------------------;;

(cl-defun sboo-submodule-directory (package-name &key version)
  "Return « \"`sboo-submodule-directory'/`PACKAGE-NAME-VERSION'\" ».

Examples:

• M-: (add-to-list 'load-path (sboo-submodule-directory \"use-package\")
    ⇒ \"/home/sboo/.emacs.d/submodules/use-package/\"

• M-: (add-to-list 'load-path (sboo-submodule-directory \"use-package\" :version \"2.3\")
    ⇒ \"/home/sboo/.emacs.d/submodules/use-package-2.3/\"

Links:

• URL `https://git-scm.com/book/en/v2/Git-Tools-Submodules'.
• URL `https://chrisjean.com/git-submodules-adding-using-removing-and-updating/'."

  (let* ((PackageDirectoryPrefix (concat sboo-vendored-package-directory package-name))

	 (VersionSuffix          (if version
	                             (format "-%s" version)
                                   ""))

	 (PackageDirectory (file-name-as-directory
                            (concat PackageDirectoryPrefix VersionSuffix)))
         )

    PackageDirectory))

;;----------------------------------------------;;

TODO

  (use-package dante
     :load-path (sboo-submodule-directory "dante")

;; Error (use-package): Failed to parse package dante: Symbol’s value as variable is void: sboo-submodule-directory


;;----------------------------------------------;;

(cl-defun sboo-deep-copy-alist (alist)

  "Copy ALIST deeply (i.e. recursively).

Inputs:

• ALIST — is an `alist'.

Output:

• an `alist' with the same keys and values as ALIST."

  (mapcar #'copy-sequence alist))

;;----------------------------------------------;;

(use-package lisp-mode

  :init

  ()

  :bind (:map lisp-mode-map
              ("[" . sboo-insert-open-parenthesis)
              ("]" . sboo-insert-close-parenthesis)
              ("(" . sboo-insert-open-square-bracket)
              (")" . sboo-insert-close-square-bracket)
              )

  :config 

  ())

;;----------------------------------------------;;

(use-package lisp-mode

  :init

  ()

  :bind (:map lisp-mode-map
              ("[" . sboo-insert-open-parenthesis)
              ("]" . sboo-insert-close-parenthesis)
              ("(" . sboo-insert-open-square-bracket)
              (")" . sboo-insert-close-square-bracket)
              )

  :config 

  ())

;;----------------------------------------------;;


    (when sboo-dante-default-method
      (setq dante-methods-alist
            (sboo-move-to-head-of-alist dante-methods-alist :key sboo-dante-default-method)))

;;----------------------------------------------;;

--------------------------------------------------
--------------------------------------------------

--------------------------------------------------
--------------------------------------------------

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

;;----------------------------------------------;;

