(let ((h (make-hash-table :test 'equal)))
(puthash "align-content" "Formal syntax: flex-start | flex-end | center | space-between | space-around | stretch" h)
(puthash "align-items" "Formal syntax: flex-start | flex-end | center | baseline | stretch" h)
(puthash "align-self" "Formal syntax: auto | flex-start | flex-end | center | baseline | stretch" h)
(puthash "all" "Formal syntax: initial | inherit | unset" h)
(puthash "<angle>" "" h)
(puthash "grad" "" h)
(puthash "turn" "" h)
(puthash "deg" "" h)
(puthash "rad" "" h)
(puthash "animation" "Formal syntax: <single-animation-name> || <time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode>" h)
(puthash "animation-delay" "Formal syntax: <time>#" h)
(puthash "animation-direction" "Formal syntax:  <single-animation-direction>#" h)
(puthash "animation-duration" "Formal syntax: <time>#" h)
(puthash "animation-fill-mode" "Formal syntax: <single-animation-fill-mode>#" h)
(puthash "animation-iteration-count" "Formal syntax: <single-animation-iteration-count>#" h)
(puthash "animation-name" "Formal syntax: <single-animation-name>#" h)
(puthash "animation-play-state" "Formal syntax: <single-animation-play-state>#" h)
(puthash "animation-timing-function" "Formal syntax:  <timing-function>#" h)
(puthash "auto" "" h)
(puthash "attr()" "Formal syntax: attr( attribute-name <type-or-unit>? [, <fallback> ]? )" h)
(puthash "backface-visibility" "Formal syntax:  visible | hidden " h)
(puthash "background" "Formal syntax: [ <bg-layer> , ]* <final-bg-layer>
               where <bg-layer> = <bg-image> || <position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box>{1,2} 
                                       ^            ^              ^                 ^                ^              ^
                              <'background-image'>  |     <'background-size>         |    <'background-attachment'>  |
                                           <'background-position'>         <'background-repeat'>            <'background-origin'>
                                                                                                            & <'background-clip'>
               and <final-bg-layer> = <bg-layer> || <'background-color'>" h)
(puthash "background-attachment" "Formal syntax:   <attachment>#" h)
(puthash "background-origin" "Formal syntax: <box>#" h)
(puthash "background-clip" "Formal syntax: <box>#" h)
(puthash "background-color" "Formal syntax: <color>" h)
(puthash "background-image" "Formal syntax: <bg-image>#" h)
(puthash "background-position" "Formal syntax:  <position>#" h)
(puthash "background-repeat" "Formal syntax: <repeat-style>#" h)
(puthash "border" "Formal syntax:  <br-width> || <br-style> || <color>" h)
(puthash "border-bottom" "Formal syntax: <br-width> || <br-style> || <color>" h)
(puthash "background-size" "Formal syntax: <bg-size>#" h)
(puthash "saturate()" "With a function, use the following:" h)
(puthash "sepia()" "With a function, use the following:" h)
(puthash "contrast()" "With a function, use the following:" h)
(puthash "blur()" "With a function, use the following:" h)
(puthash "hue-rotate()" "With a function, use the following:" h)
(puthash "grayscale()" "With a function, use the following:" h)
(puthash "invert()" "With a function, use the following:" h)
(puthash "opacity()" "With a function, use the following:" h)
(puthash "drop-shadow()" "With a function, use the following:" h)
(puthash "filter" "With a function, use the following:" h)
(puthash "brightness()" "With a function, use the following:" h)
(puthash "border-bottom-width" "Formal syntax: <br-width>" h)
(puthash "border-bottom-color" "Formal syntax: <color>" h)
(puthash "border-bottom-left-radius" "Formal syntax: [ <length> | <percentage> ]{1,2} " h)
(puthash "border-bottom-right-radius" "Formal syntax: [ <length> | <percentage> ]{1,2} " h)
(puthash "border-bottom-style" "Formal syntax: <br-style>" h)
(puthash "border-collapse" "Formal syntax: collapse | separate" h)
(puthash "border-image-outset" "Formal syntax: [ <length> | <number> ]{1,4}" h)
(puthash "border-color" "Formal syntax: <color>{1,4}" h)
(puthash "border-image" "Formal syntax: <'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>" h)
(puthash "border-image-repeat" "Formal syntax: [ stretch | repeat | round ]{1,2}  " h)
(puthash "border-image-slice" "Formal syntax: [<number> | <percentage>]{1,4} && fill?  " h)
(puthash "border-image-source" "Formal syntax: none | <image> " h)
(puthash "border-left-color" "Formal syntax: <color>" h)
(puthash "border-left" "Formal syntax: <br-width> || <br-style> || <color>" h)
(puthash "border-image-width" "Formal syntax: [ <length> | <percentage> | <number> | auto ]{1,4} " h)
(puthash "border-left-width" "Formal syntax: <br-width>" h)
(puthash "border-left-style" "Formal syntax: <br-style>" h)
(puthash "border-radius" "Formal syntax: [ <length> | <percentage> ]{1,4} [ / [ <length> | <percentage> ]{1,4} ]?" h)
(puthash "border-right" "Formal syntax: <br-width> || <br-style> || <color>" h)
(puthash "border-right-color" "Formal syntax: <color>" h)
(puthash "border-right-width" "Formal syntax: <br-width>" h)
(puthash "border-spacing" "Formal syntax: <length> <length>?" h)
(puthash "border-right-style" "Formal syntax: <br-style>" h)
(puthash "border-style" "Formal syntax: <br-style>{1,4}" h)
(puthash "border-top-color" "Formal syntax: <color>" h)
(puthash "border-top" "Formal syntax: <br-width> || <br-style> || <color>" h)
(puthash "border-top-style" "Formal syntax: <br-style>" h)
(puthash "border-top-left-radius" "Formal syntax: [ <length> | <percentage> ]{1,2}  " h)
(puthash "border-top-right-radius" "Formal syntax: [ <length> | <percentage> ]{1,2}  " h)
(puthash "border-top-width" "Formal syntax: <br-width>" h)
(puthash "bottom" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "border-width" "Formal syntax: <br-width>{1,4}" h)
(puthash "box-shadow" "Formal syntax: none | [inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? ] ]#" h)
(puthash "box-sizing" "Formal syntax: content-box | padding-box | border-box" h)
(puthash "break-after" "Formal syntax: auto | always | avoid | left | right | page | column | avoid-page | avoid-colum" h)
(puthash "break-before" "Formal syntax: auto | always | avoid | left | right | page | column | avoid-page | avoid-colum" h)
(puthash "calc()" "calc(expression)" h)
(puthash "caption-side" "Formal syntax: top | bottom" h)
(puthash "@charset" "@charset charset;" h)
(puthash "em" "" h)
(puthash "rem" "" h)
(puthash "vw" "" h)
(puthash "vmin" "" h)
(puthash "cm" "" h)
(puthash "vmax" "" h)
(puthash "<length>" "" h)
(puthash "vh" "" h)
(puthash "pc" "" h)
(puthash "px" "" h)
(puthash "ch" "" h)
(puthash "ex" "" h)
(puthash "mm" "" h)
(puthash "pt" "" h)
(puthash "in" "" h)
(puthash "clear" "Formal syntax: none | left | right | both" h)
(puthash "clip-path" "clip-path: <uri> | none | inherit" h)
(puthash "clip" "Formal syntax: <shape> | auto" h)
(puthash "columns" "Formal syntax: <'column-width'> || <'column-count'>" h)
(puthash "color" "Formal syntax: <color>" h)
(puthash "column-count" "Formal syntax: <number> | auto" h)
(puthash "hsla()" "" h)
(puthash "hsl()" "" h)
(puthash "rgb()" "" h)
(puthash "rgba()" "" h)
(puthash "<color>" "" h)
(puthash "column-fill" "Formal syntax: auto | balance" h)
(puthash "column-gap" "Formal syntax: <length> | normal" h)
(puthash "column-rule" "Formal syntax: <'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>" h)
(puthash "column-rule-color" "Formal syntax: <color>" h)
(puthash "column-rule-style" "Formal syntax: <br-style>" h)
(puthash "column-rule-width" "Formal syntax: <br-width>" h)
(puthash "column-span" "Formal syntax: none | all" h)
(puthash "column-width" "Formal syntax: <length> | auto" h)
(puthash "content" "Formal syntax: normal | none | [ <string> | <uri> | <counter> | attr() | open-quote | close-quote | no-open-quote | no-close-quote ]+" h)
(puthash "counter-reset" "Formal syntax: [<user-ident> <integer>?]+ | none" h)
(puthash "counter-increment" "Formal syntax: [<user-ident> <integer>?]+ | none" h)
(puthash "steps()" "cubic-bezier(x1, y1, x2, y2)" h)
(puthash "<timing-function>" "cubic-bezier(x1, y1, x2, y2)" h)
(puthash "cubic-bezier()" "cubic-bezier(x1, y1, x2, y2)" h)
(puthash "cursor" "Formal syntax: [ [ <uri> [<x> <y>]?,]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]" h)
(puthash "direction" "Formal syntax: ltr | rtl" h)
(puthash "display" "Formal syntax: none | inline | block | list-item | inline-block | inline-table | table | table-cell | table-column | table-column-group | table-footer-group | table-header-group | table-row | table-row-group | flex | inline-flex | grid | inline-grid | run-in" h)
(puthash "@document" "The values provided to the url(), url-prefix(), and domain() functions can optionally be enclosed by single or double quotes. The values provided to the regexp() function must be enclosed in quotes." h)
(puthash "empty-cells" "Formal syntax: show | hide" h)
(puthash "element()" "element( id )" h)
(puthash "dpi" "" h)
(puthash "<resolution>" "" h)
(puthash "dppx" "" h)
(puthash "dpcm" "" h)
(puthash "flex-direction" "Formal syntax: row | row-reverse | column | column-reverse" h)
(puthash "flex" "Formal syntax: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]" h)
(puthash "flex-basis" "Formal syntax: <'width'>" h)
(puthash "flex-grow" "Formal syntax: <number>" h)
(puthash "flex-flow" "Formal syntax: <'flex-direction'> || <'flex-wrap'>" h)
(puthash "flex-shrink  " "Formal syntax: <number>" h)
(puthash "flex-wrap" "Formal syntax: nowrap | wrap | wrap-reverse" h)
(puthash "float" "Formal syntax: left | right | none" h)
(puthash "font" "Formal syntax: [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]? <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ] | caption | icon | menu | message-box | small-caption | status-bar" h)
(puthash "@font-face" "@font-face {
  [font-family: <family-name>;]?
  [src: [ <uri> [format(<string>#)]? | <font-face-name> ]#;]?
  [unicode-range: <urange>#;]?
  [font-variant: <font-variant>;]?
  [font-feature-settings: normal|<feature-tag-value>#;]?
  [font-stretch: <font-stretch>;]?
  [font-weight: <weight>];
  [font-style: <style>];
}" h)
(puthash "font-family" "Formal syntax: [ <family-name> | <generic-family> ]# " h)
(puthash "font-feature-settings" "Formal syntax: normal | <feature-tag-value>#" h)
(puthash "font-size-adjust" "Formal syntax: none | <number>" h)
(puthash "font-style" "Formal syntax: normal | italic | oblique" h)
(puthash "font-size" "Formal syntax: <absolute-size> | <relative-size> | <length> | <percentage>" h)
(puthash "font-stretch" "Formal syntax: normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded" h)
(puthash "font-variant" "Formal syntax: normal | small-caps " h)
(puthash "font-weight" "Formal syntax: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900" h)
(puthash "hz" "" h)
(puthash "khz" "" h)
(puthash "<frequency>" "" h)
(puthash "<gradient>" "" h)
(puthash "height" "Formal syntax: [<length> | <percentage>] && [border-box | content-box]? | available | min-content | max-content | fit-content | complex | auto" h)
(puthash "image()" "" h)
(puthash "hyphens" "Formal syntax: none | manual | auto" h)
(puthash "image-rendering" "Formal syntax: auto | crisp-edges | pixelated" h)
(puthash "@import" "@import url;                      or
@import url list-of-media-queries;" h)
(puthash "image-orientation" "Formal syntax: from-image | <angle> | [<angle>? flip]" h)
(puthash "<image>" "An <image> CSS data type represents may be one of the following:" h)
(puthash "ime-mode" "Formal syntax: auto | normal | active | inactive | disabled" h)
(puthash "inherit" "" h)
(puthash "initial" "" h)
(puthash "<integer>" "" h)
(puthash "justify-content" "Formal syntax: flex-start | flex-end | center | space-between | space-around" h)
(puthash "@keyframes" "@keyframes <identifier> {
  [ [ from | to | <percentage> ] [, from | to | <percentage> ]* block ]*
}" h)
(puthash "left" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "letter-spacing" "Formal syntax: normal | <length>" h)
(puthash "line-height" "Formal syntax: normal | <number> | <length> | <percentage>" h)
(puthash "list-style" "Formal syntax: <'list-style-image'> || <'list-style-position'> || <'list-style-type'>" h)
(puthash "linear-gradient()" "Formal grammar: linear-gradient(  [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )
                                  \---------------------------------/ \----------------------------/
                                    Definition of the gradient line         List of color stops  

                      where <side-or-corner> = [left | right] || [top | bottom]
                        and <color-stop>     = <color> [ <percentage> | <length> ]?" h)
(puthash "list-style-image" "Formal syntax: <uri> | none" h)
(puthash "list-style-position" "Formal syntax: inside | outside" h)
(puthash "list-style-type" "Formal syntax: disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none" h)
(puthash "margin-bottom" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "margin" "Formal syntax: [ <length> | <percentage> | auto ]{1,4}" h)
(puthash "margin-right" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "margin-left" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "marks" "marks: [ crop || cross ] | none" h)
(puthash "margin-top" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "mask" "mask: <uri> | none | inherit" h)
(puthash "mask-type" "mask-type: luminance | alpha" h)
(puthash "scalez()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "rotate3d()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "translate3d()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "skew()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "scale()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "skewy()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "translatey()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "rotatex()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "rotatey()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "translatez()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "skewx()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "matrix()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "rotatez()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "scale3d()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "rotate()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "translate()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "translatex()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "perspective()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "scaley()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "scalex()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "matrix3d()" "matrix(a, b, c, d, tx, ty)" h)
(puthash "max-height" "Formal syntax: <length> | <percentage> | none | max-content | min-content | fit-content | fill-available" h)
(puthash "@media" "@media <media types> {
  /* media-specific rules */
}" h)
(puthash "max-width" "Formal syntax: <length> | <percentage> | none | max-content | min-content | fit-content | fill-available" h)
(puthash "min-height" "Formal syntax: <length> | <percentage> | max-content | min-content | fit-content | fill-available" h)
(puthash "ms" "" h)
(puthash "s" "" h)
(puthash "<time>" "" h)
(puthash "min-width" "Formal syntax: <length> | <percentage> | max-content | min-content | fit-content | fill-available" h)
(puthash "@namespace" "For a default namespace:" h)
(puthash "none" "" h)
(puthash "normal" "" h)
(puthash "<number>" "" h)
(puthash "orphans" "Formal syntax: <integer>" h)
(puthash "opacity" "Formal syntax: <number>" h)
(puthash "outline" "Formal syntax: <'outline-color'> || <'outline-width'> || <'outline-style'>" h)
(puthash "outline-color" "Formal syntax: <color> | invert" h)
(puthash "order" "Formal syntax: <integer>" h)
(puthash "outline-width" "Formal syntax: <br-width>" h)
(puthash "outline-style" "Formal syntax: <br-style>" h)
(puthash "overflow-x" "Formal syntax: visible | hidden | scroll | auto" h)
(puthash "overflow-y" "Formal syntax: visible | hidden | scroll | auto" h)
(puthash "outline-offset" "Formal syntax: <length>" h)
(puthash "padding" "Formal syntax: [ <length> | <percentage> ]{1,4}" h)
(puthash "padding-bottom" "Formal syntax: <length> | <percentage>" h)
(puthash "padding-left" "Formal syntax: <length> | <percentage>" h)
(puthash "padding-right" "Formal syntax: <length> | <percentage>" h)
(puthash "padding-top" "Formal syntax: <length> | <percentage>" h)
(puthash "@page" "@page :pseudo-class {
  margin:2in;
}" h)
(puthash "page-break-before" "Formal syntax: auto | always | avoid | left | right" h)
(puthash "page-break-after" "Formal syntax: auto | always | avoid | left | right" h)
(puthash "<percentage>" "" h)
(puthash "page-break-inside" "Formal syntax: auto | avoid" h)
(puthash "perspective" "Formal syntax: none | <length>" h)
(puthash "perspective-origin" "Formal syntax: [ <percentage> | <length> | left | center | right | top | bottom] | [ [ <percentage> | <length> | left | center | right ] && [ <percentage> | <length> | top | center | bottom ] ]" h)
(puthash "position" "Formal syntax: static | relative | absolute | sticky | fixed" h)
(puthash "pointer-events" "pointer-events:  auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit" h)
(puthash "<position>" "" h)
(puthash "radial-gradient()" "Formal grammar: 
  radial-gradient( [[ circle               || <length> ]                     [ at <position> ]? , | 
                    [ ellipse              || [<length> | <percentage> ]{2}] [ at <position> ]? , |
                    [ [ circle | ellipse ] || <extent-keyword> ]             [ at <position> ]? , |
                                                                               at <position> ,     <color-stop> [ , <color-stop> ]+ )
                   \------------------------------------------------------------------------------/\--------------------------------/
                                 Definition of the contour, size and position of the ending shape         List of color stops  
    
          where <extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side
            and <color-stop> = <color> [ <percentage> | <length> ]?" h)
(puthash "quotes" "Formal syntax: [<string> <string>]+ | none" h)
(puthash "<ratio>" "" h)
(puthash "<shape>" "The rect() functional notation produces a region in the form of a rectangle." h)
(puthash "rect()" "The rect() functional notation produces a region in the form of a rectangle." h)
(puthash "repeating-linear-gradient()" "Formal grammar: repeating-linear-gradient(  [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )
                                            \---------------------------------/ \----------------------------/
                                              Definition of the gradient line         List of color stops  

                              where <side-or-corner> = [left | right] || [top | bottom]
                                and <color-stop>     = <color> [ <percentage> | <length> ]?" h)
(puthash "repeating-radial-gradient()" "Formal grammar: 
  repeating-radial-gradient( [[ circle               || <length> ]                     [ at <position> ]? , | 
                              [ ellipse              || [<length> | <percentage> ]{2}] [ at <position> ]? , |
                              [ [ circle | ellipse ] || <extent-keyword> ]             [ at <position> ]? , |
                                                                                         at <position> ,     <color-stop> [ , <color-stop> ]+ )
                            \------------------------------------------------------------------------------/\--------------------------------/
                                 Definition of the contour, size and position of the ending shape                    List of color stops  
    
              where <extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side
                    and <color-stop> = <color> [ <percentage> | <length> ]?" h)
(puthash "resize" "Formal syntax: none | both | horizontal | vertical" h)
(puthash "right" "Formal syntax: <length> | <percentage> | auto" h)
(puthash "@supports" "@supports <supports_condition> {
  /* specific rules */
}" h)
(puthash "table-layout" "Formal syntax: auto | fixed" h)
(puthash "<string>" "" h)
(puthash "tab-size" "Formal syntax: <integer>" h)
(puthash "text-align-last" "Formal syntax: auto | start | end | left | right | center | justify" h)
(puthash "text-align" "Formal syntax: [ start | end | left | right | center ] || <string> ] | justify | match-parent | start end" h)
(puthash "text-decoration" "Formal syntax: <'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'>" h)
(puthash "text-decoration-line" "Formal syntax: none | [ underline || overline || line-through || blink ]" h)
(puthash "text-decoration-color" "Formal syntax: <color>" h)
(puthash "text-decoration-style" "Formal syntax: solid | double | dotted | dashed | wavy" h)
(puthash "text-indent" "Formal syntax: <length> | <percentage> && [ hanging || each-line ]" h)
(find-file "css-eldoc-hash-table.el")
(kill-region (point-min) (point-max))
(insert "(setq css-eldoc-hash-table ")
(insert (prin1-to-string h))
(insert ")")
(insert "(provide 'css-eldoc-hash-table)")
(save-buffer))

