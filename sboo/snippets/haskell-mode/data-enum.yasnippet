# -*- mode: snippet -*-
#
# key         : enum
# name        : [sboo] Define an enumeration « data »type.
# type        : snippet
# condition   : (let ((KEY "enum")) (condition-case nil (sboo-yas-column-p :key KEY :indentation 0) (void-function (= (current-column) (string-width KEY)))))
# expand-env  : ((yas-indent-line 'fixed) (yas-wrap-around-region 'nil))
# contributor : Spiros Boosalis <samboosalis@gmail.com> 
#
# --
--------------------------------------------------

{- | 

-}

data ${1:T}

  = ${2:A}
  | ${3:B}

  deriving stock    (Enum,Bounded,Ix)
  deriving anyclass (GEnum)
  deriving stock    (Show,Read,Eq,Ord)
  deriving stock    (Generic,Data,Lift)
  deriving anyclass (NFData,Hashable)

--------------------------------------------------

{- | @≡ 'default$1'@ -}

instance Default $1 where def = default$1

--------------------------------------------------

{- | @≡ '$2'@ -}

default$1 :: $1
default$1 = $2

$0