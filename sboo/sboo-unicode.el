;;; -*- lexical-binding: t -*-

;;==============================================;;
;;; Commentary:

;; Completion for Unicode Character Names.
;;
;; ‚Ä¢ `sboo-ucs-names-table' ‚Äî the primary Unicode data structure.
;; ‚Ä¢ `sboo-read-character-name' ‚Äî the primary completion function.
;;
;; 

;;==============================================;;
;;; Code:

;;----------------------------------------------;;
;; Imports -------------------------------------;;
;;----------------------------------------------;;

;; Builtins:

(require 'cl-lib)     ;; "CommonLisp Library"
(require 'subr-x) ;; "SUBRoutine-eXtRAS"
(require 'mule)   ;; "MUltiLingual Environment"

;;----------------------------------------------;;
;; Variables: Customizeable --------------------;;
;;----------------------------------------------;;

(defcustom sboo-top-unicode-characters-list

  '(
    ?‚Ä¢
    ?‚Üí
    ?¬´
    ?¬ª
    ?‚Äú
    ?‚Äù
    ?‚áí
    ?‚ë†
    ?‚ë°
    ?‚ë¢
    ?‚úî
    ?‚úò
    ?‚àÄ
    ?‚àÉ
    ?‚àë
    ?‚àè
    ?√©
    ?√±
    ?√†
    ?‚å•
    ?^
    ?‚á™
    ?‚ùñ
    ?‚åò
    ?‚àà
    ?‚àã
    ?‚äÜ
    ?‚äá
    ?Œ£
    ?¬¨
    ?‚àù
    ?‚àÖ
    ?‚àû

    ;;

    ?Œ±
    ?Œ≤
    ?Œ≥
    ?üñÆ
    ?üñ∞
    ?‚áß
    ?‚ò∞
    ?‚≠æ
    ?‚èé
    ?‚å´
    ?‚å¶
    ?‚éã
    ?‚§í
    ?‚§ì
    ?‚á§
    ?‚á•
    ?‚ñ≤
    ?‚ñº
    ?‚Üë
    ?‚Üì
    ?‚Üí
    ?‚Üê
    ?‚ùì
    ?‚úÇ
    ?‚éå
    ?üóò
    ?üîé
    ?üîá
    ?üîâ
    ?üîä
    ?‚óº
    ?‚èØ
    ?‚èÆ
    ?‚è≠
    ?‚è´
    ?‚è¨
    ?¬°
    ?¬ø
    ?‚Äï
    ?¬∂
    ?ÀΩ
    ?üó∑
    ?‚òë
    ?‚ì™
    ?‚ë†
    ?‚ë°
    ?‚ë¢
    ?‚ë£
    ?‚ë§
    ?‚ë•
    ?‚ë¶
    ?‚ëß
    ?‚ë®
    ?‚ë©
    ?‚ë™
    ?‚ë´
    ?‚ë¨
    ?‚ë≠
    ?‚ëÆ
    ?‚ëØ
    ?‚ë∞
    ?‚ë±
    ?‚ë≤
    ?‚ë≥
    ?üëÅ
    ?üëÇ
    ?üòÉ
    ?üëç
    ?‚úä
    ?üëâ
    ?üå£
    ?‚õÜ
    ?‚ùÑ
    ?‚õ∞
    ?üó∫
    ?‚òï
    ?üçÑ
    ?üêï
    ?üêí
    ?üêò
    ?üêñ
    ?üêô
    ?üê¨
    ?ü¶Å
    ?üö≤
    ?ùÑû
    ?ùÑ¢
    ?üéπ
    ?üé∏
    ?‚ô©
    ?‚ô™
    ?‚ô´
    ?‚ô¨
    ?‚ôØ
    ?‚ô≠
    ?ùÜè
    ?ùÜê
    ?ùÜë
    ?ùÜí
    ?ùÜì
    ?üÖê
    ?‚ò≠
    ?¬©
    ?üÑØ 
    ?‚ôª
    ?„é∞
    ?„é±
    ?„é≤
    ?„é≥
    ?„éç
    ?„éé
    ?„éè
    ?„éö
    ?„éõ
    ?„éú
    ?„éù
    ?„éû
    ?„èå
    ?„éÖ
    ?„éÜ
    ?„éá
    ?„èà
    ?„éê
    ?„éë
    ?„éß
    ?„é®
    ?„éâ
    ?ùõÅ
    ?√ó
    ?‚Ñ§
    ?‚Ñö
    ?‚Ñù
    ?‚ÑØ
    ?‚àö
    ?„èí
    ?‚äï
    ?‚äñ
    ?‚äò
    ?‚äö
    ?‚äú
    ?¬±
    ?‚àâ
    ?‚àå
    ?‚äà
    ?‚äâ
    ?‚®ù
    ?‚â§
    ?‚â•
    ?‚â∞
    ?‚â±
    ?‚â°
    ?‚â¢
    ?‚ä®
    ?‚ä≠
    ?‚àÑ
    ?‚àµ
    ?‚ä¶
    ?‚ä¨
    ?‚àß
    ?‚à®
    ?‚à´
    ?‚àÇ
    ?‚ä∂
    ?‚ä∑
    ?‚ä∏
    ?Ôºà
    ?Ôºâ
    ?Ôºª
    ?ÔºΩ
    ?ÔΩõ
    ? ÔΩù
    ?Ô∏∑
    ?Ô∏∏
    ?‚éß
    ?‚é®
    ?‚é©
    ?‚üπ
    ?‚¨≥
    ?‚üø
    ?‚≠ç
    ?‚Üî
    ?¬Æ
    ?‚Ñ¢
    ?¬º
    ?¬Ω
    ?¬æ
    ?‚Öì
    ?‚Öî
    ?‚Öõ
    ?‚Öú
    ?‚Öù
    ?‚Öû
    ?‚Ö†
    ?‚Ö°
    ?‚Ö¢
    ?‚Ö£
    ?‚Ö§
    ?‚Ö•
    ?‚Ö¶
    ?‚Öß
    ?‚Ö®
    ?‚Ö©
    ?‚Ö™
    ?‚Ö´
    )

  "Set of Unicode Characters to prioritize during display/selection.

Related:

‚Ä¢ `sboo-insert-char'

Links:

‚Ä¢ URL `http://xahlee.info/comp/unicode_computing_symbols.html'"

  :type '(repeated (char))

  :safe t
  :group 'sboo)

;; NOTE üëº üëª üßô üßö üßõ üßú üßù üßû üßü üëø ‚åò ‚ú≤ ‚éà ^ ‚åÉ ‚ùñ ‚åò ‚éá ‚å• ‚óÜ ‚óá ‚ú¶ ‚úß ‚áß ‚á™ üÑ∞ üÖ∞ ‚á™  ‚¨Ö ‚û° ‚¨Ü ‚¨á ‚éâ ‚éä ‚éô ‚ç∞ ‚ùì ‚ùî ‚Ñπ üõà ‚òæ ‚èè ‚úâ üè† üè° ‚åÇ ‚úÇ ‚úÑ ‚éå ‚Ü∂ ‚Ü∑ ‚ü≤ ‚ü≥ ‚Ü∫ ‚Üª üîç üîé üîÖ üîÜ üîá üîà üîâ üîä üï® üï© üï™ ‚óº ‚èØ ‚èÆ ‚è≠ ‚è™ ‚è© ‚è´ ‚è¨ ü•¨ ü•¶ üçÑ üçÖ üçÜ üå∂ ü•ë ü•ï ü•í ü•î ü•ú üê≠ üêπ üê∞ üê∂ üê∫ ü¶ä üêµ üê∏ üôà üôâ üôä üêØ ü¶Å ü¶ì ü¶í üê¥ üêÆ üê∑ üêª üêº üê≤ ü¶Ñ üêÖ üêÜ üêò ü¶è üêÇ üêÉ üêÑ üêé ü¶å üêê üêè üêë üêñ üêó ü¶õ üê™ üê´ ü¶ç ü¶ô ü¶ò üêâ ü¶ñ ü¶ï üéπ üéª üé∑ üé∫ üé∏ ü•Å üéµ üé∂ üéº üéú üéù ‚ô© ‚ô™ ‚ô´ ‚ô¨ ùÖú ùÖù ùÖû ùÖü ùÖ† ùÖ° ùÖ¢ ùÖ£ ùÖ§ ùÑ∫ ùÑ© ùÑª ùÑº ùÑΩ ùÑæ ùÑø ùÖÄ ùÖÅ ùÖÇ ùÑí ùÑì ùÑê ùÑë ùÜè ùÜê ùÜë ùÜí ùÜì ùÑÄ ùÑÅ ùÑÇ ùÑÉ ùÑÑ ùÑÖ ùÑî ùÑï ùÑÜ ùÑá ùÑà ùÑâ ùÑä ùÑã ùÑå ùÑç ùÑé ùÑè ùÑñ ùÑó ùÑò ùÑô ùÑö ùÑõ ùÑû ùÑ° ùÑ¢ ùÑöùÑü ùÑöùÑ† ùÑöùÑ£ ùÑöùÑ§ ùÑöùÑ• ùÑö ùÑ¶ ‚ôØ ùÑ™ ùÑ∞ ùÑ± ùÑ≤ ùÑ≥ ‚ô≠ ùÑ´ ùÑ¨ ùÑ≠ ‚ôÆ ùÑÆ ùÑØ

;;----------------------------------------------;;
;; Variables: Internal -------------------------;;
;;----------------------------------------------;;

(defvar sboo-ucs-names-table

  nil

  "Hash-Table from Unicode Character names to Unicode Character codepoints.

¬´ ucs ¬ª abbreviates ¬´ Unicode CharacterS(?) ¬ª.

Examples:

‚Ä¢ M-: (message \"%c\" (gethash \"LATIN SMALL LETTER ALPHA\" sboo-ucs-names-table))
    ‚áí \"…ë\"

Accessed by Function `sboo-ucs-names-table'.")

;;----------------------------------------------;;

(defvar sboo-ucs-names-list

  nil

  "List of Unicode Character names.

Examples:

‚Ä¢ M-: (nth 891 sboo-ucs-names-list)
    ‚áí \"LATIN SMALL LETTER ALPHA\"

Related:

‚Ä¢ `sboo-unicode--'

Accessed by Function `sboo-ucs-names-list'.")

;;----------------------------------------------;;

(defvar sboo-ucs-names-interesting-list

  nil

  "List of Unicode Character names, filtering away ‚Äúboring‚Äù characters (like ASCII).

Related:

‚Ä¢ `sboo-unicode--interesting-character-p'")

;;----------------------------------------------;;

(defvar sboo-ucs-names-annotated-list

  nil

  "List of Unicode Character names, annotated with their namesake-characters.

Examples:

‚Ä¢ M-: (nth 891 sboo-ucs-names-annotated-list)
    ‚áí \"…ë LATIN SMALL LETTER ALPHA\"

Related:

‚Ä¢ `sboo-unicode--annotate-character-p'

Displayed by Function `sboo-read-character-name'.

Like `sboo-ucs-names-list', but each name is prefixed by the namesake character (plus a space).")

;;----------------------------------------------;;

(defcustom sboo-unicode-completion-annotate

  t

  "Whether to display the unicode character itself (beside the name), during completion.

Type:

‚Ä¢ a `booleanp'.

Related:

‚Ä¢ `sboo-read-character-by-name'.

For example, `sboo-unicode-completion-annotate' toggles whether `sboo-read-character-by-name' displays:

‚Ä¢ \"LATIN SMALL LETTER ALPHA\"   (if nil)
‚Ä¢ \"…ë LATIN SMALL LETTER ALPHA\" (if t)"

  :type '(boolean)

  :safe  t
  :group 'sboo)

;;----------------------------------------------;;

(defcustom sboo-unicode-completion-namesake-divider

  "  "

  "Divider between a character and its name, in `sboo-read-character-name' (a `stringp')."

  :type '(choice (string  :tag "Literal text")
                 (integer :tag "Number of spaces")
                 (const nil :tag "No divider")) ;TODO or "Fallback to default"?

  ;;:set ;TODO set dirty flag (property?)

  :safe  t
  :group 'sboo)

;;----------------------------------------------;;
;; Functions: Accessors ------------------------;;
;;----------------------------------------------;;

(cl-defun sboo-ucs-names-table (&key (refresh nil) (only-interesting t))

  "Return a mapping of Unicode Character names to Unicode Character codepoints.

Initializes Variable `sboo-ucs-names-table'.

Inputs:

‚Ä¢ REFRESH ‚Äî a `booleanp'.
  If non-nil, rebuild Variable `sboo-ucs-names-table' from `ucs-names'
  (even if they've already been initialized to a non-nil `hash-table-p').
‚Ä¢ ONLY-INTERESTING ‚Äî a `booleanp'.
  If non-nil, filter by `sboo-unicode--interesting-character-p'.

Output:

‚Ä¢ a `hash-table-p' from `stringp's to `integerp's.

Examples:

‚Ä¢ M-: (sboo-ucs-names-table :refresh t)
    ‚áí #s(hash-table size 42943 test equal rehash-size 1.5 rehash-threshold 0.8125 data (\"NULL\" 0 ... ))

Related:

‚Ä¢ `ucs-names'

Notes:

‚Ä¢ `ucs-names' is a `hash-table-p' on Emacs‚â•26 and an alist on Emacs‚â§25."

  (progn

    ;; Initialize:

    (when (or refresh
              (not sboo-ucs-names-table))

      (let* ((OBJECT (ucs-names))
             (TYPE   (type-of OBJECT))
             (TABLE  (pcase TYPE
                       ('hash-table OBJECT)
                       ('list       (sboo/alist->table OBJECT :test #'equal :size 43000))
                       (_           nil)))

             (TABLE2  (if only-interesting
                          (let ((NEW-TABLE (copy-hash-table TABLE)))
                            (maphash (lambda (key value)
                                       (unless (sboo-unicode--interesting-character-p value)
                                           (remhash key NEW-TABLE)))
                                     NEW-TABLE)
                            NEW-TABLE)
                        (copy-hash-table TABLE)))
             )

        (setq sboo-ucs-names-table TABLE2)))

    ;; Access:

    sboo-ucs-names-table))

;; M-: (sboo-ucs-names-table :refresh t :only-interesting t)

;;----------------------------------------------;;

(cl-defun sboo-ucs-names-list (&key (refresh nil) (annotate t) (only-interesting t))

  "Return all Unicode Character names.

Inputs:

‚Ä¢ REFRESH ‚Äî a `booleanp'.
  If non-nil, rebuild the ¬´ sboo-ucs-names-* ¬ª variables
  (i.e. Variable `sboo-ucs-names-list', Variable `sboo-ucs-names-annotated-list')
  from `ucs-names', even if they've already been initialized (to a non-nil `listp').
‚Ä¢ ANNOTATE ‚Äî a `booleanp'.
  Whether to return Variable `sboo-ucs-names-list' or Variable `sboo-ucs-names-annotated-list'.
‚Ä¢ ONLY-INTERESTING ‚Äî a `booleanp'.
  If non-nil, keep only ‚Äúinteresting‚Äù characters
  (i.e. filter by `sboo-unicode--interesting-character-p').

Output:

‚Ä¢ a `listp' of `stringp's.

Examples:

‚Ä¢ M-: (sboo-ucs-names-list)
    ‚áí (\"NULL\" ... \"BULLET\" ...)

‚Ä¢ M-: (sboo-ucs-names-list :annotate t)
    ‚áí (\"  NULL\" ... \"‚Ä¢ BULLET\" ...)

‚Ä¢ M-: (sboo-ucs-names-list :only-interesting t)
    ‚áí ( ... \"‚Ä¢ BULLET\" ...)

Related:

‚Ä¢ `ucs-names'
‚Ä¢ `sboo-top-unicode-characters-list'

Notes:

‚Ä¢ `ucs-names' is a `hash-table-p' on Emacs‚â•26 and an `alistp' on Emacs‚â§25."

  (progn

    ;; Initialize:

    (when (or refresh
              (not (and sboo-ucs-names-list
                        sboo-ucs-names-annotated-list)))

      (let* ((TABLE        (sboo-ucs-names-table :refresh refresh :only-interesting only-interesting))
             (NAMES-KEYS   (hash-table-keys TABLE))
             (NAMES-TOP    (mapcar #'sboo-unicode-get-char-name sboo-top-unicode-characters-list))
             (NAMES-SORTED (sboo-unicode--move-sublist-to-front NAMES-TOP NAMES-KEYS :test #'equal))
             (NAMES        NAMES-SORTED)
             )

        (progn

          (setq sboo-ucs-names-list NAMES)

          (setq sboo-ucs-names-annotated-list
                (mapcar #'sboo-unicode--prefix-namesake-character NAMES)))))

    ;; Access:

    (if annotate
        sboo-ucs-names-annotated-list
      sboo-ucs-names-list)))

;; M-: (sboo-ucs-names-list :refresh t :annotate t :only-interesting t)

;;----------------------------------------------;;

(defun sboo-unicode-completion-namesake-divider-string ()

  "Accessor for variable `sboo-unicode-completion-namesake-divider'.

Output:

‚Ä¢ a `stringp'."

  (let* ((OBJECT sboo-unicode-completion-namesake-divider)
         )

  (pcase OBJECT

    ((pred stringp)  OBJECT)
    ((pred integerp) (make-string OBJECT ?\ ))
    ('nil            nil)

    (_ " "))))

;; ^ NOTE ¬´  ?\  ¬ª is a space literal character.

;;----------------------------------------------;;

(defun sboo-unicode-completion-namesake-divider-length ()

  "Accessor for Variable `sboo-unicode-completion-namesake-divider'.

Output:

‚Ä¢ an `integerp'."

  (let* ((OBJECT sboo-unicode-completion-namesake-divider)
         )

  (pcase OBJECT

    ((pred stringp)  (length OBJECT))
    ((pred integerp) OBJECT)
    ('nil            nil)

    (_ 1))))

;;----------------------------------------------;;
;; Functions -----------------------------------;;
;;----------------------------------------------;;

(defun sboo-ucs-names-get (name)

  "Get the Unicode Character whose name is NAME.

Inputs:

‚Ä¢ NAME ‚Äî a `stringp'.
  The name of a Unicode Character.

Output:

‚Ä¢ an `integerp'.
  a Unicode Character codepoint.

Type (Haskell):

‚Ä¢ ¬´ :: String -> Maybe Char ¬ª

Example:

‚Ä¢ M-: (format \"%c\" (sboo-ucs-names-get \"BULLET\"))
    ‚áí \"‚Ä¢\"
‚Ä¢ M-: (sboo-ucs-names-get \"NOT A UNINCODE CHARACTER NAME\")
    ‚áí nil"

  (let* ((NAME  (upcase name))
         (TABLE (sboo-ucs-names-table))
         (CHAR  (gethash NAME TABLE))
         )

    CHAR))

;; ^ (format "%c" (sboo-ucs-names-get "BULLET"))

;;----------------------------------------------;;

(defun sboo-unicode-get-char-name (char)

  "Get the Unicode Character Database ¬´ 'name ¬ª of CHAR.

Inputs:

‚Ä¢ CHAR ‚Äî a `characterp' (preferred);
  or a `stringp' or `symbolp' (accepted).

Examples:

    M-: (sboo-unicode-get-char-name ?Œ≥)
    ‚áí \"GREEK SMALL LETTER GAMMA\"

    M-: (sboo-unicode-get-char-name 'Œ≥)
    ‚áí \"GREEK SMALL LETTER GAMMA\"

    M-: (sboo-unicode-get-char-name \"Œ≥Œ±ŒºŒºŒ±\")
    ‚áí \"GREEK SMALL LETTER GAMMA\"

Related:

‚Ä¢ `get-char-code-property'."

  (let* ((CHAR (pcase char
                 ((pred characterp) char)
                 ((pred stringp)    (aref char 0))
                 ((pred symbolp)    (aref (symbol-name char) 0))
                 (_ (throw 'sboo-unicode-get-char-name
                           (format-message "CHAR is ¬´ %S ¬ª, of type ¬´ %S ¬ª, not a `characterp' or `stringp'." char (type-of char))))))

         (NAME (get-char-code-property CHAR 'name))
         )

    (progn
      (when (called-interactively-p 'any)
        (message NAME))

      NAME)))

;; TODO e.g. with `M-x set-input-method RET TeX RET`, typing `\xi` inputs `Œæ`.

;;----------------------------------------------;;
;; Commands ------------------------------------;;
;;----------------------------------------------;;

(defun sboo-unicode-print-char (char)

  "Get the Unicode Character Database ¬´ 'name ¬ª of CHAR.

Inputs:

‚Ä¢ CHAR ‚Äî a character (an `integerp').

Examples:

    M-: (call-interactively #'sboo-unicode-print-char)
    Character: c
    ‚áí \"LATIN SMALL LETTER C\"

    M-: (sboo-unicode-print-char ?Œ≥)
    ‚áí \"GREEK SMALL LETTER GAMMA\"

Related:

‚Ä¢ `sboo-unicode-get-char-name'."

  (interactive (list
                (or (condition-case _
                        (sboo-unicode--interesting-character-p (thing-at-point 'char))
                      (error nil))
                    (condition-case _
                        (let ((CLIPBOARD-CONTENTS (car kill-ring)))
                          (if (and CLIPBOARD-CONTENTS (= 1 (length CLIPBOARD-CONTENTS)))
                              (substring CLIPBOARD-CONTENTS 0 1)))
                      (error nil))
                    (condition-case _
                        (read-char-exclusive "Character (press a key): ")
                                        ;TODO read 1-length string.
                      (error nil))
                    )))

  (let* ((NAME (sboo-unicode-get-char-name CHAR))
         )

    (progn
      (when (called-interactively-p 'any)
        (message NAME))

      NAME)))

;;----------------------------------------------;;

(defun sboo-read-character-name (&optional refresh annotate only-interesting)

  "Read a Unicode Character name.

Inputs: Keyword Arguments are passed-through to `sboo-ucs-names-list'.

Output:

‚Ä¢ a `stringp'.
  a key of `ucs-names'.

Type (Haskell):

‚Ä¢ ¬´ :: IO String ¬ª.

Related:

‚Ä¢ `ucs-names'."

  (interactive (list nil
                     (if current-prefix-arg t nil)
                     ))

  (let*  ((ANNOTATE      (or annotate sboo-unicode-completion-annotate))

          (PROMPT        (format "%s: " "Unicode Character name"))
          (REQUIRE-MATCH t)
          (PREDICATE     nil)
          (HISTORY       nil)
          (CANDIDATES    (sboo-ucs-names-list :annotate ANNOTATE :only-interesting only-interesting :refresh refresh))
          )

    (let* ((STRING (let ((completion-ignore-case t))
                     (completing-read PROMPT CANDIDATES PREDICATE REQUIRE-MATCH nil HISTORY nil nil)))

           (NAME   (if ANNOTATE
                       (sboo-unicode--strip-namesake-character STRING)
                     STRING))
           )

      (string-trim-left NAME))))

;; ^ NOTE `string-trim-left' will trim a `sboo-unicode-completion-namesake-divider' any length.

;;----------------------------------------------;;

(defun sboo-read-character-by-name ()

  "Read a Unicode Character name, returning the corresponding Unicode Character.

Output:

‚Ä¢ an `integerp' (a character).
  a value of `ucs-names'.

Type (Haskell):

‚Ä¢ ¬´ :: IO Char ¬ª.

Related:

‚Ä¢ `ucs-names'.
‚Ä¢ `read-character-by-name' ‚Äî doesn't support fuzzy-matching."

  (interactive (list
                (if current-prefix-arg t nil)
                ))

  (let* ((STRING (sboo-read-character-name nil t t))
         (CHAR   (sboo-ucs-names-get STRING))
         )

    CHAR))

;;----------------------------------------------;;

;;TODO;(cl-defun sboo-insert-unicode-name (name &key display-properties)

(defun sboo-insert-unicode-name ()

  "Read and insert a Unicode Character name.

Output:

‚Ä¢ a `stringp'.
  The Unicode Character name that was read and inserted.
  nil if that character didn't satisfy `sboo-unicode--insertable-character-p'.

Type (Haskell):

‚Ä¢ ¬´ :: IO String ¬ª.

Related:

‚Ä¢ `sboo-read-character-name'."

  (interactive)

  (let ((STRING (sboo-read-character-name nil t t))
        (NAME   (upcase STRING))
        )

    (insert STRING)))

;; M-x (call-interactively #'sboo-insert-unicode-name)

;;----------------------------------------------;;

;;TODO;(cl-defun sboo-insert-char (name &key display-properties)


(defun sboo-insert-char (name)

  "Insert the Unicode Character named `NAME'.

Inputs:

‚Ä¢ NAME ‚Äî a `stringp'. 
         The name of a Unicode Character.

Type (Haskell):

‚Ä¢ ¬´ :: String -> IO () ¬ª.

Notes:

‚Ä¢ `sboo-insert-char' is like `insert-char', but:

    ‚Ä¢ its completion is more flexible (for example, `helm' can be configured to efficiently fuzzily-match)
    ‚Ä¢ it displays the literal unicode character itself alongside each name (when `sboo-unicode-completion-annotate' is non-nil).

Related:

‚Ä¢ `sboo-unicode-completion-annotate'.
‚Ä¢ `sboo-read-character-name'.
‚Ä¢ `sboo-ucs-names-get'."

  (interactive (list (sboo-read-character-name nil t t)
                     ))

  (let* ((NAME name)
         (CHAR (sboo-ucs-names-get NAME))
         )

    (pcase CHAR

      ('nil              nil)
      ((pred stringp)    (insert      CHAR))
      ((pred characterp) (insert-char CHAR))

      (_ (error (format "(sboo-insert-char ?%c)" CHAR))))))

;; M-x (call-interactively #'sboo-insert-char) 

;;----------------------------------------------;;
;; Utilities -----------------------------------;;
;;----------------------------------------------;;

(cl-defun sboo-unicode--prefix-namesake-character (name)

  "Prefix NAME with the character it names.

Inputs:

‚Ä¢ NAME ‚Äî a `stringp'. The name of the unicode character.

Output:

‚Ä¢ a `stringp'. 
  the output `length' will always be exactly two more than the input's.

Some characters aren't displayed, including:

‚Ä¢ non-printable characters (e.g. NULL)
‚Ä¢ ascii characters (e.g. LATIN SMALL LETTER A)

Examples:

    M-: (sboo-unicode--prefix-namesake-character \"BULLET\")
      ‚áí \"‚Ä¢  BULLET\"

    M-: (sboo-unicode--prefix-namesake-character \"SKULL\")
      ‚áí \"üíÄ  SKULL\"

    M-: (sboo-unicode--prefix-namesake-character \"NULL\")
      ‚áí \"   NULL\"

    M-: (equal (substring (sboo-unicode--prefix-namesake-character \"NULL\") (sboo-unicode-completion-namesake-divider-length)) \"NULL\")
      ‚áí t

    M-: (= (sboo-unicode-completion-namesake-divider-length) (- (length (sboo-unicode--prefix-namesake-character \"NULL\")) (length \"NULL\"))
      ‚áí t"

  (let* ((CHAR    (sboo-ucs-names-get name))
         (DIV     (sboo-unicode-completion-namesake-divider-string))
         )

    (if DIV

        (let* ((STRING (if (and CHAR (sboo-unicode--annotate-character-p CHAR))
                           (char-to-string CHAR)
                         " "))
               )
          (concat STRING DIV name))

      (char-to-string CHAR))))

;; ¬´ C-x C-e ¬ª Tests:
;;
;; (sboo-unicode--prefix-namesake-character "SKULL")
;; (sboo-unicode--prefix-namesake-character "LATIN SMALL LETTER ALPHA")
;; (sboo-unicode--prefix-namesake-character "")
;;
;; (sboo-unicode--prefix-namesake-character "NULL")
;; (sboo-unicode--prefix-namesake-character "DIGIT ZERO")
;; (sboo-unicode--prefix-namesake-character "LATIN SMALL LETTER A")
;;

;;----------------------------------------------;;

(cl-defun sboo-unicode--annotate-character-p (char &key )

  "Whether `sboo-read-character' should annotate CHAR.

Inputs:

‚Ä¢ CHAR ‚Äî an `integerp'.
  A Unicode Character codepoint.

Output:

‚Ä¢ a `booleanp'. 

Some characters can't be displayed (or shouldn't be annotated), including:

‚Ä¢ Non-printable characters (e.g. NULL)
‚Ä¢ Alphanumeric ASCII characters (e.g. LATIN SMALL LETTER A)

Examples:

    M-: (sboo-unicode--annotate-character-p ?üíÄ)
      ‚áí t

    M-: (sboo-unicode--annotate-character-p ?-)
      ‚áí t

    M-: (sboo-unicode--annotate-character-p 0)
      ‚áí nil

    M-: (sboo-unicode--annotate-character-p ?0)
      ‚áí nil

    M-: (sboo-unicode--annotate-character-p ?a)
      ‚áí nil

    M-: (sboo-unicode--annotate-character-p ?Z)
      ‚áí nil

Links:

‚Ä¢ URL `https://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html'"

  (let* ((UNPRINTABLE?        (< char 32))  ;TODO what about unprintables in higher-ranges? or surrogates?
         (ASCII-ALPHANUMERIC? (or (and (>= char ?0) (<= char ?9))
                                  (and (>= char ?A) (<= char ?Z))
                                  (and (>= char ?a) (<= char ?z))
                                  ))
         )

    (and (not UNPRINTABLE?)
         (not ASCII-ALPHANUMERIC?)
         )))

;;----------------------------------------------;;

(cl-defun sboo-unicode--insertable-character-p (char &key )

  "Whether `sboo-insert-char' can `insert' CHAR.

Inputs:

‚Ä¢ CHAR ‚Äî an `integerp'.
  A Unicode Character codepoint.

Output:

‚Ä¢ a `booleanp'.

Some characters can't be inserted, including:

‚Ä¢ Surrogates (e.g. TODO)

Links:

‚Ä¢ URL `'"

  t)

;;----------------------------------------------;;

(defun sboo-unicode--strip-namesake-character (string)

  "Invert `sboo-unicode--prefix-namesake-character'.

Inputs:

‚Ä¢ STRING ‚Äî a `stringp'.

Output:

‚Ä¢ a `stringp'. 

Examples:

    M-: (sboo-unicode--strip-namesake-character (sboo-unicode--prefix-namesake-character \"BULLET\"))
      ‚áí \"BULLET\"

Related:

‚Ä¢ `sboo-unicode-completion-namesake-divider'"

  (let* ((LENGTH (sboo-unicode-completion-namesake-divider-length))
         )

    (if LENGTH
        (substring string (+ 1 LENGTH))
      string)))

;; (sboo-unicode--strip-namesake-character (sboo-unicode--prefix-namesake-character "BULLET"))

;;----------------------------------------------;;

(defun sboo-unicode--interesting-character-p (char)

  "Whether CHAR is an ‚Äúinteresting‚Äù Unicode Character.

Inputs:

‚Ä¢ CHAR ‚Äî an `integerp'.

Output:

‚Ä¢ a `booleanp'."

  (let* ((UNPRINTABLE?        (< char 32))  ;TODO what about unprintables in higher-ranges? or surrogates?
         (ASCII-ALPHANUMERIC? (or (and (>= char ?0) (<= char ?9))
                                  (and (>= char ?A) (<= char ?Z))
                                  (and (>= char ?a) (<= char ?z))
                                  ))
         )

    (and (not UNPRINTABLE?)
         (not ASCII-ALPHANUMERIC?)
         )))

;;----------------------------------------------;;

(cl-defun sboo/alist->table (alist &key test size)

  "Create a Hash Table from ALIST.

Inputs:

‚Ä¢ ALIST ‚Äî an association `listp'. 
‚Ä¢ TEST  ‚Äî a `symbolp' (naming a `functionp'). See `make-hash-table'.
‚Ä¢ SIZE  ‚Äî an `integerp'. See `make-hash-table'.

Output:

‚Ä¢ a `hash-table-p' with the same entries as ALIST (modulo duplicate keys).

Example:

‚Ä¢ M-: (sboo/alist->table '((x . 1) (y . 2)) :test #'eq :size 3)
    ‚áí #s(hash-table size 3 test eq data (x 1 y 2))"

  (let* ((TEST  (or test
                    #'equal))

         (SIZE  (or size
                    (length alist)))

         (TABLE (make-hash-table :test TEST :size SIZE))

         )

    (progn

      (dolist (ENTRY alist)
        (let ((k (car ENTRY))
              (v (cdr ENTRY))
              )
          (puthash k v TABLE)))

      TABLE)))

;;----------------------------------------------;;

(cl-defun sboo-unicode--move-sublist-to-front (sublist superlist &key (test #'equal))

  "Pull SUBLIST to the head of SUPERLIST.

Inputs:

‚Ä¢ SUBLIST   ‚Äî a `listp'. items not in SUPERLIST are ignored.
‚Ä¢ SUPERLIST ‚Äî a `listp'. the relative order of items not in SUBLIST is preserved.
‚Ä¢ TEST      ‚Äî a `functionp'. how to check items for equality.

Output:

‚Ä¢ a `listp'. a new list (copied from SUPERLIST, then modified).
  has the same items as SUPERLIST, possibly in a different order.

Example:

‚Ä¢ M-: (sboo-unicode--move-sublist-to-front '(x y z) '(a b y c x))
    ‚áí '(x y a b c)

‚Ä¢ M-: (sboo-unicode--move-sublist-to-front nil '(a b c))
   ‚áí '(a b c)

‚Ä¢ M-: (sboo-unicode--move-sublist-to-front '(x y z) nil)
    ‚áí nil

Related:

‚Ä¢ `'"

  (let* ((SUPERLIST-COPY (copy-sequence superlist))
         (SUBLIST-COPY   (remove-duplicates sublist :test test))

         (COMPARE        (lambda (x y)

                            (let ((X-IN-SUBLIST (if (cl-member x SUBLIST-COPY :test test) 1 0))
                                  (Y-IN-SUBLIST (if (cl-member y SUBLIST-COPY :test test) 1 0))
                                  )
                              (cond

                                ((and (> X-IN-SUBLIST 0) (> Y-IN-SUBLIST 0))
                                 (let ((X-INDEX (cl-position x SUBLIST-COPY :test test))
                                       (Y-INDEX (cl-position y SUBLIST-COPY :test test))
                                       )
                                   (<= X-INDEX Y-INDEX)))

                                (t
                                 (> X-IN-SUBLIST Y-IN-SUBLIST))))))
         )

    (cl-stable-sort SUPERLIST-COPY COMPARE)))

;;----------------------------------------------;;
;; Notes ---------------------------------------;;
;;----------------------------------------------;;

;;; DOCS ‚Äòucs-names‚Äô: [TODO]
;;
;; ¬´ ucs-names ¬ª :: ¬´ HashMap String‚Äì Char ¬ª
;;
;;     M-: (type-of ucs-names)
;;     'hash-table
;;
;; Examples:
;;
;;     M-: (gethash "BULLET" ucs-names)
;;     8226
;;     
;;     M-: '(?‚Ä¢)
;;     '(8226)
;;
;;     M-: (type-of (gethash "BULLET" ucs-names))
;;     'integer
;; 
;;     M-: (member "BULLET" (hash-table-keys ucs-names))
;;     t
;;

;;; DOCS ‚Äòget-char-code-property‚Äô:
;;
;; ¬´ (get-char-code-property CHAR PROPNAME) ¬ª
;;
;; > M-: (get-char-code-property ?‚Ä¢ 'name)
;; > "BULLET"
;; > 
;; > M-: (type-of (get-char-code-property ?‚Ä¢ 'name))
;; > 'string
;; > 
;; > M-: (type-of char-code-property-table)
;; > 'char-table
;;
;; NOTE a char-table is sparse and compact, so `aref' doesn't quite work: [TODO why not?]
;;
;;     M-: (aref char-code-property-table ?‚Ä¢)
;;     nil
;;
;;     M-: (char-table-range char-code-property-table ?‚Ä¢)
;;     nil
;; 
;;     M-: 
;;     
;;
;;

;;; DOCS `map-char-table':
;;
;; ¬´ (map-char-table FUNCTION CHAR-TABLE) ¬ª
;;
;; > This function calls its argument function for each element of char-table that has a non-nil value. The call to function is with two arguments, a key and a value. The key is a possible range argument for char-table-range‚Äîeither a valid character or a cons cell (from . to), specifying a range of characters that share the same value. The value is what (char-table-range char-table key) returns.
;;
;; NOTE:
;; > Standard mapping functions like `mapcar` do not allow char-tables because a char-table is a sparse array whose nominal range of indices is very large.
;;

;;; DOCS `mapcar':
;;
;; ¬´ (mapcar FUNCTION SEQUENCE) ¬ª
;;
;; > Apply FUNCTION to each element of SEQUENCE, and make a list of the results.
;; > The result is a list just as long as SEQUENCE.
;; > SEQUENCE may be a list, a vector, a bool-vector, or a string.
;;

;;; DOCS `insert-char':
;;
;; > DEFUN ("insert-char", Finsert_char, Sinsert_char, 1, 3,
;; >        "(list (read-char-by-name \"Insert character (Unicode name or hex): \")\
;; >               (prefix-numeric-value current-prefix-arg)\
;; >               t))",
;; >        doc: /* Insert COUNT copies of CHARACTER.
;; > Interactively, prompt for CHARACTER.  You can specify CHARACTER in one
;; > of these ways:
;; >
;; >  - As its Unicode character name, e.g. \"LATIN SMALL LETTER A\".
;; >    Completion is available; if you type a substring of the name
;; >    preceded by an asterisk `*', Emacs shows all names which include
;; >    that substring, not necessarily at the beginning of the name.
;; >
;; >  - As a hexadecimal code point, e.g. 263A.  Note that code points in
;; >    Emacs are equivalent to Unicode up to 10FFFF (which is the limit of
;; >    the Unicode code space).
;; > 
;; >  - As a code point with a radix specified with #, e.g. #o21430
;; >    (octal), #x2318 (hex), or #10r8984 (decimal).
;; >
;; > If called interactively, COUNT is given by the prefix argument.  If
;; > omitted or nil, it defaults to 1.
;; > 

;; NOTE `completion-extra-properties':
;;
;; * :annotation-function
;; * :exit-function
;;
;; 

;;; DOCS `cl-flet':
;;
;; e.g.
;;
;;    (require 'cl-lib)
;;    (cl-flet ((f (x) (* x x)))
;;      (f 7))
;;

;;; DOCS `char-to-string':
;;
;; e.g.
;;
;;    M-: (char-to-string ?‚Ä¢)
;;    "‚Ä¢"

;; `cl-stable-sort'
;;
;;     (cl-sort SEQ PREDICATE :key)
;;
;; This function sorts seq into increasing order as determined by using predicate to compare pairs of elements. predicate should return true (non-nil) if and only if its first argument is less than (not equal to) its second argument. For example, < and string-lessp are suitable predicate functions for sorting numbers and strings, respectively; > would sort numbers into decreasing rather than increasing order.
;; 

;; `cl-position':
;; 
;; M-: (cl-position "y" '("x" "y" "z" "y") :test #'equal)
;;     1
;; 

;;; See:
;;
;; ./share/emacs/26.1/lisp/international/uni-name.el 
;; 

;;==============================================;;
(provide 'sboo-unicode)